-----BEGIN PGP MESSAGE-----
Comment: https://keybase.io/download
Version: Keybase Go 1.0.18 (darwin)

xA0DAAoBnt4j6n6KSJABy+F0AOIAAAAA7S0tLQpsYXlvdXQ6IHBvc3QKdGl0bGU6
ICJTb21lIHByb2JsZW1zIHdpdGggUmVhY3QvUmVkdXgiCnJlZGlyZWN0X2Zyb206
CiAgLSAvd2h5LXJlYWN0LXJlZHV4LWlzLWFuLWluZmVyaW9yLXBhcmFkaWdtLmh0
bWwKLS0tCgpBYm91dCB0d28geWVhcnMgYWdvIEkgZmlyc3QgdHJpZWQgUmVhY3Qg
aW4gYSByZWFsIGFwcGxpY2F0aW9uLiBBcyBJIHN0YXJ0ZWQgdXNpbmcgaXQgZXh0
ZW5zaXZlbHkgaW4gdGhhdCBhcHBsaWNhdGlvbiwgSSBmb3VuZCBpdCB1bndpZWxk
eSBhbmQgdW5uZWNlc3NhcmlseSBjb21wbGljYXRlZC4gQWZ0ZXIgdGhhdCBJIGRl
Y2lkZWQgdG8gYnVpbGQgbXkgb3duIHNvbHV0aW9ucyB1c2luZyBSeEpTIGFuZCB2
aXJ0dWFsLWRvbSBhbmQgYWZ0ZXIgYSB5ZWFyIG9yIHNvIEkgY3JlYXRlZCBhIGZy
YW1ld29yayBjYWxsZWQgW0N5Y2xlLmpzXShodHRwOi8vY3ljbGUuanMub3JnKS4K
ClRvZGF5IGFmdGVyIHR3byB5ZWFycywgSSBuZWVkZWQgdG8gd3JpdGUgYSBsYXJn
ZSBhcHBsaWNhdGlvbiB1c2luZyBSZWFjdCBhbmQgUmVkdXgsIGJlY2F1c2UgSSB3
YXMgdGFyZ2V0dGluZyBSZWFjdCBOYXRpdmUsIGFuZCBbQ3ljbGUgTmF0aXZlXSho
dHRwczovL2dpdGh1Yi5jb20vY3ljbGVqcy9jeWNsZS1yZWFjdC1uYXRpdmUpIGlz
IHN0aWxsIGV4cGVyaW1lbnRhbCBhbmQgZG9lc24ndCBzdXBwb3J0IHRoaW5ncyBz
dWNoIGFzIG5hdmlnYXRpb24vcm91dGluZy4gSSBoYWQgaG9wZXMgUmVkdXggd291
bGQgbWFrZSBSZWFjdCBub3Qgc28gdW53aWVsZHksIGJ1dCBub3cgSSBjYW4gY29u
ZmlybSBSZWFjdC9SZWR1eCBpcyBhbiBpbmZlcmlvciBwYXJhZGlnbSBjb21wYXJl
ZCB0byBDeWNsZSBvciBFbG0uCgpbSSB0d2VldGVkIGFib3V0IHRoaXMgYnJpZWZs
eV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9hbmRyZXN0YWx0ei9zdGF0dXMvNjg5NzQ4
NDY3MjA4NTYwNjQwKSBidXQgaXQgY3JlYXRlZCBjb25mdXNpb24sIHNvIEknbGwg
ZXhwbGFpbiBteSBhcmd1bWVudHMgd2l0aCBmYWN0cyBhcyBtdWNoIGFzIEkgY2Fu
LiBTb3JyeSBmb3IgbXkgbGFuZ3VhZ2UgaW4gVHdpdHRlciBpZiBpdCBmZWx0IHdy
b25nIHRvIHlvdS4KCkkgbmVlZCB0byBleHBsYWluIHdoYXQgSSBtZWFuIHdpdGgg
aW5mZXJpb3IgcGFyYWRpZ20uIFJlYWN0IG1heSBiZSBzdXBlcmlvciBpbiBlY29z
eXN0ZW0sIG9yIHdpdGggZmVhdHVyZSBjb3ZlcmFnZSwgYnV0IG5vdCBzbyBhcyBh
IHBhcmFkaWdtLiBUaGVzZSBhcmUgdGhyZWUgZGlmZmVyZW50IGNvbmNlcm5zIHlv
dSBzaG91bGQgYmVhciBpbiBtaW5kIHdoZW4gY2hvb3NpbmcgYSBsaWJyYXJ5L2Zy
YW1ld29yay4gWW91IG1heSBuZWVkIHRoZSBlY29zeXN0ZW0gb3Igc29tZSBzcGVj
aWZpYyBmZWF0dXJlcywgc28gcGFyYWRpZ20gbWF5IG5vdCBiZSBpbXBvcnRhbnQu
IEluIG90aGVyIGNhc2VzLCB5b3Ugd2FudCB0byBjaG9vc2UgdGhlIGxpYnJhcnkv
ZnJhbWV3b3JrIHdpdGggdGhlIG1vc3QgZXJnb25vbWljIHBhcmFkaWdtLiBUaGF0
IG1lYW5zIGEgZ29vZCBzaWduYWwtdG8tbm9pc2UgcmF0aW86IGVhY2ggbGluZSBv
ZiBjb2RlIGNvbnRyaWJ1dGVzIHRvIGRlbGl2ZXJpbmcgZmVhdHVyZXMsIGVhY2gg
bGluZSBvZiBjb2RlIGlzICJzZW1hbnRpYyIgYW5kIHJlYWRzIGxpa2UgYSBzcGVj
aWZpY2F0aW9uLiBJbiBzaG9ydCwgdGhlIGNsb3NlciB0aGUgY29kZSBpcyB0byBh
IGRlc2NyaXB0aW9uIG9mICJ3aGF0IEkgd2FudCB0aGUgcHJvZ3JhbSB0byBkbyIs
IHRoZSBiZXR0ZXIuIEJ1dCB0aGUgbW9yZSBtYW51YWwgd2lyaW5nIHRoZXJlIGlz
LCB0aGUgbW9yZSAibm9pc2UiIGlzIGFkZGVkIHRvIHlvdXIgY29kZSwgYW5kIHRo
ZSBtb3JlIHZlcmJvc2UgaXQgZ2V0cy4KClRvIG1ha2UgdGhhdCBjbGFpbSwgSSBh
bSBiaWFzZWQgYmVjYXVzZSBJIGhhdmUgYnVpbHQgQ3ljbGUuanMsIGJ1dCBJIG5l
ZWQgdG8gaW5jbHVkZSBFbG0gaW4gdGhpcyBzdG9yeSBhcyB3ZWxsLiBJIGhhdmUg
bm90IGJ1aWx0IEVsbSBhbmQgbmVpdGhlciBhbSBJIGEgc3Ryb25nIG1lbWJlciBp
biBpdHMgY29tbXVuaXR5LiBJbml0aWFsbHkgSSB3YXMgc2tlcHRpYyBhYm91dCBF
bG0sIGJ1dCBhZnRlciBoYXZpbmcgdXNlZCBpdCwgdGFsa2VkIHRvIFJpY2hhcmQg
RmVsZG1hbiBhbmQgRXZhbiBDemFwbGlja2ksIGFuZCBzZWVuIGNvd29ya2VycyB1
c2UgaXQsIEknbSBjb252aW5jZWQgaXQncyBhIGZhbnRhc3RpYyBwYXJhZGlnbSB0
byBnZXQgdGhpbmdzIGRvbmUuICJFbG0iIHVzdWFsbHkgY29tcHJpc2VzIHR3byB0
aGluZ3M6IHRoZSBFbG0gbGFuZ3VhZ2UgYW5kIHRoZSBFbG0gYXJjaGl0ZWN0dXJl
LiBUaGUgRWxtIGxhbmd1YWdlIGlzIGZhbnRhc3RpYyB0byBrZWVwIGRldmVsb3Bl
cnMgcHJvZHVjdGl2ZSBhbmQgY29kZSB3aXRoIGxlc3MgYnVncywgc2luY2UgdGhl
IGNvbXBpbGVyIGRvZXMgYSBsb3QgdG8gYXNzaXN0IHlvdS4gVGhlIEVsbSBhcmNo
aXRlY3R1cmUgaXMgcmVtaW5pc2NlbnQgdG8gUmVkdXgsIGJ1dCBpcyBtdWNoIGxl
c3MgdmVyYm9zZSB3aGVuIHVzZWQgaW4gdGhlIEVsbSBsYW5ndWFnZS4gSXQncyBh
biBhcmNoaXRlY3R1cmUgbWFkZSBmb3IgdGhlIGxhbmd1YWdlIChhbmQgc29tZXRp
bWVzIGZlZWxzIGxpa2UgYSBsYW5ndWFnZSBtYWRlIGZvciB0aGUgYXJjaGl0ZWN0
dXJlKSwgdW5saWtlIGFuIGFyY2hpdGVjdHVyZSBmaW5kaW5nIGl0J3Mgb3duIHdh
eSB0byAiZml0IiBpbiBhIGxhbmd1YWdlLgoKSW4gdGhlIGZvbGxvd2luZyBzZWN0
aW9ucyBJJ2xsIHByb3ZpZGUgZmFjdHMsIG5vdCBqdXN0IG9waW5pb25zLgoKPGgy
IGlkPSJpbml0aWFsLXNldHVwIiBjbGFzcz0iaHIiPjxzcGFuIGNsYXNzPSJociI+
SU5JVElBTCBTRVRVUDwvc3Bhbj48L2gyPgoKV2l0aCBteSBjb3dvcmtlciBbT3Nz
aSBIYW5oaW5lbl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9vaGFuaGkvKSwgd2UgaW5p
dGlhbGx5IHN0YXJ0ZWQgYnVpbGRpbmcgdGhlIGFwcGxpY2F0aW9uIHdpdGggQ3lj
bGUgTmF0aXZlLCBhbmQgd2UgZGlkIHRoYXQgd2l0aCBwYWlyIHByb2dyYW1taW5n
LiBPc3NpIHdhcyB0aGUgbWFpbiBwcm9ncmFtbWVyIGFuZCBoYWQgbm90IGRvbmUg
Q3ljbGUuanMgZGV2ZWxvcG1lbnQgc28gZmFyLiBCZXNpZGVzIGluc3RhbGxpbmcg
WENvZGUsIGl0IHRvb2sgT3NzaSBhYm91dCAxaCBvciAyaCB3aXRoIG15IGluc3Ry
dWN0aW9ucyB0byBnZXQgdGhlIGluaXRpYWwgc2V0dXAgYW5kIGhhdmUgYSBIZWxs
byBXb3JsZCBkZWxpdmVyZWQuIFRoZW4sIE9zc2kgYWxvbmUgd2l0aG91dCBhbnkg
c3VwcG9ydCB0b29rIDFoIG1vcmUgdG8gZGV2ZWxvcCBhbiBhZGRpdGlvbmFsIGZl
YXR1cmUgdG8gZmV0Y2ggSlNPTiBmcm9tIGEgYmFja2VuZCBhbmQgZGlzcGxheSB0
aGF0IGluIHRoZSBhcHAuCgpUaGVuLCB3ZSBoYWQgdG8gcG9ydCB0aGlzIHdob2xl
IGFwcCB0byBSZWFjdC9SZWR1eC4gSW4gc2hvcnQsIGl0IHRvb2sgdXMgN2ggdG8g
YWNjb21wbGlzaCB0aGlzIHNhbWUgYXBwLiBXZSBoYWQgdG8gY29tYmluZSB0b2dl
dGhlciBtdWx0aXBsZSBsaWJyYXJpZXMgZm9sbG93aW5nIHRoZSBkaXJlY3Rvcnkg
c3RydWN0dXJlIGluIFJlZHV4J3MgZXhhbXBsZXMuIFRoZSBsaXN0IG9mIGNvbmNl
cHRzIG9yIG1vdmluZyBwYXJ0cyB0byBiZSBhd2FyZSBvZiBpbiBSZWFjdC9SZWR1
eCBpcyBsb25nZXIgdGhhbiBpbiBDeWNsZSBvciBFbG06CgotIEFjdGlvbiB0eXBl
cyAod2UgdXNlZCBgZW51bWlmeWAgdG8gYXR0ZW1wdCB0byByZWR1Y2Ugc29tZSBi
b2lsZXJwbGF0ZSBvZiByZXBlYXRpbmcgYWN0aW9uIHR5cGUgc3RyaW5ncykKLSBB
Y3Rpb24gY3JlYXRvciBmdW5jdGlvbnMKLSBSZWR1Y2VycyAobG9uZyBzd2l0Y2gg
c3RhdGVtZW50cyB3aGljaCBhcmUgc3ludGFjdGljYWxseSB1Z2x5IGJ1dCBzZW1h
bnRpY2FsbHkgb2suIFRoZXkgYXJlIG5vdCBuZWNlc3NhcnkgaW4gQ3ljbGUsIGFu
ZCBpbiBFbG0gdGhleSBzeW50YWN0aWNhbGx5IGxvb2sgZ29vZCkKLSBTdG9yZSAo
c2V0dGluZyBpdCB1cCBkb2VzIG5vdCBleGlzdCBuZWl0aGVyIGluIEN5Y2xlIG5v
ciBFbG0pCi0gTWlkZGxld2FyZSAobm90IGluIEN5Y2xlIG5vciBFbG0pCi0gUGln
Z3liYWNraW5nIGNvbXBvbmVudERpZE1vdW50IHRvIHN0YXJ0IGFkLWhvYyBlZmZl
Y3RzCi0gUHJvdmlkZXIgKG5vdCBpbiBDeWNsZSBub3IgRWxtKQotIENvbnRhaW5l
cnMKCkFsbCBvZiB0aGVzZSBhcmUgc29sdXRpb25zIHRoYXQgYWN0dWFsbHkgc29s
dmUgcHJvYmxlbXMgaW4gdGhlIGNvbnRleHQgb2YgUmVhY3QvUmVkdXguIEhvd2V2
ZXIsIGluIG90aGVyIHBhcmFkaWdtcywgd2UgZG9uJ3QgbmVlZCB0aGVzZSBzb2x1
dGlvbnMgYmVjYXVzZSB0aGUgdW5kZXJseWluZyBwYXJhZGlnbSBkb2VzIG5vdCBj
cmVhdGUgdGhlIHJlc3BlY3RpdmUgcHJvYmxlbXMuIE92ZXJhbGwgbW9zdCBvZiB0
aGUgY29uY2VwdHMgYWJvdmUgYXJlIGJvaWxlcnBsYXRlIG9yIGhhdmUgYm9pbGVy
cGxhdGUgKGxpa2UgYWN0aW9uIHR5cGUgcmVkdW5kYW50IHN0cmluZ3Mgb3IgSmF2
YVNjcmlwdCBzd2l0Y2ggY2FzZSBpbiByZWR1Y2VycykgdGhhdCBhcmUgKm5vaXNl
KiB0byB0aGUgZmVhdHVyZXMgKCpzaWduYWwqKSB0aGF0IHdlIHdhbnQgdG8gZGVs
aXZlci4gQW4gaWRlYWwgZnJhbWV3b3JrL3BhcmFkaWdtIG1ha2VzIHlvdSBmb2N1
cyBvbiBkZWxpdmVyaW5nIGZlYXR1cmVzLCBub3Qgb24gd2lyaW5nIHRoZSBtYWNo
aW5lcnkuIEkgYW0gbm90IHNvIGZhbWlsaWFyIHdpdGggRW1iZXIgaW4gdGhpcyBy
ZWdhcmQsIGJ1dCBJIGJlbGlldmUgdGhlaXIgZW5kIGdvYWwgaXMgYWxzbyB0byBi
ZSBhIGZyYW1ld29yayB0aGF0IGhlbHBzIHlvdSBmb2N1cyBvbiBmZWF0dXJlcy4g
SSBjYW4ndCBzcGVhayB3aGV0aGVyIHRoZXkgZGVsaXZlciB0aGF0IHByb21pc2Us
IGJ1dCBhdCBsZWFzdCB0aGUgZW5kIGdvYWwgaXMgY29ycmVjdDogcGFyYWRpZ20g
ZXJnb25vbXkuCgpPbmUgY291bGQgYXJndWUgdGhhdCBSZWR1eCBoYXMgaGlnaGVy
IGNvc3QgdXBmcm9udCB0byBzZXR1cCBldmVyeXRoaW5nIHdoaWxlIEN5Y2xlLmpz
IGFyY2hpdGVjdHVyZSBhbHNvIG5lZWRzIGFsbCBvZiB0aG9zZSBlbGVtZW50cyBl
dmVudHVhbGx5LCBidXQgdGhhdCdzIG5vdCB0aGUgY2FzZSBzaW5jZSB0aGUgQ3lj
bGUuanMgYXJjaGl0ZWN0dXJlIGlzIHNjYWxhYmxlIGFuZCBjb21wb3NhYmxlLiBJ
dCdzICJmcmFjdGFsIiwgcmVhZCBtb3JlIGFib3V0IGl0IFtoZXJlXShodHRwOi8v
c3RhbHR6LmNvbS91bmlkaXJlY3Rpb25hbC11c2VyLWludGVyZmFjZS1hcmNoaXRl
Y3R1cmVzLmh0bWwpLgoKVGhpbmdzIGxpa2UgdXNpbmcgYGNvbXBvbmVudERpZE1v
dW50YCB0byBkaXNwYXRjaCBhY3Rpb25zIGluIG9yZGVyIHRvIGdldCB0aGUgYXBw
IHRvIHN0YXJ0IGFuIG9wZXJhdGlvbiBhcmUgbW9yZSB2ZXJib3NlIGFuZCBsZXNz
IG9idmlvdXMgdGhhbiBhIHNpbXBsZSBgc3RhcnRXaXRoKClgIFJ4SlMgb3BlcmF0
b3IgdXNlIGluIEN5Y2xlLmpzLgoKRWxtIGFsc28gZ2V0cyBvdXQgeW91ciB3YXkg
YnkgaGF2aW5nIGltbXV0YWJsZSB0eXBlcyBidWlsdC1pbiwgc2lnbmFscyBidWls
dC1pbiwgImRpc3BhdGNoZXIiIChNYWlsYm94KSBidWlsdC1pbiwgYW5kIEFEVHMg
Zm9yIGFjdGlvbiB0eXBlcyBidWlsdC1pbi4gVGhlIGV4cGVyaWVuY2UgaXMgZ3Jl
YXQgZm9yIGEgZGV2ZWxvcGVyIGFuZCB0aGUgaW5pdGlhbCBzZXR1cCBpcyBxdWlj
a2VyLgoKPGgyIGlkPSJqc3giIGNsYXNzPSJociI+PHNwYW4gY2xhc3M9ImhyIj5K
U1g8L3NwYW4+PC9oMj4KCkkgYW0gYSBwcm9wb25lbnQgb2YgdXNpbmcgSmF2YVNj
cmlwdCBmdW5jdGlvbnMgaW5zdGVhZCBvZiBKU1ggZm9yIG1hcmt1cCwgYmVjYXVz
ZSBpdCBpcyBmcmllbmRsaWVyIHRvIGFueSB0ZXh0L2NvZGUgZWRpdG9yLCBhbmQg
bGVzcyB2ZXJib3NlIHRoYW4gSFRNTC1pbnNwaXJlZCBKU1guIENvbXBhcmUgdGhl
IGZvbGxvd2luZzoKCnslIGhpZ2hsaWdodCB0ZXh0ICV9Ci8vIEpTWAo8dWwgaWQ9
ImJlc3Rlc3QtbWVudSI+CiAge2l0ZW1zLm1hcCggaXRlbSA9PgogICAgPGxpIGNs
YXNzTmFtZT0iLml0ZW0iIHsuLi5hdHRycyhpdGVtLmlkKX0+e2l0ZW0udGl0bGV9
PC9saT4KICApfQo8L3VsPgp7JSBlbmRoaWdobGlnaHQgJX0KCnslIGhpZ2hsaWdo
dCBqcyAlfQovLyBoeXBlcnNjcmlwdC1oZWxwZXJzCnVsKCcjYmVzdGVzdC1tZW51
JywgaXRlbXMubWFwKCBpdGVtID0+CiAgbGkoJy5pdGVtJywgYXR0cnMoaXRlbS5p
ZCksIGl0ZW0udGl0bGUpKQopOwp7JSBlbmRoaWdobGlnaHQgJX0KCk5laXRoZXIg
b2YgdGhlc2UgdHdvIGFyZSB1bnJlYWRhYmxlIChhcyBsb25nIGFzIHlvdSBrbm93
IHRoZSBsYW5ndWFnZSksIHlldCBKU1ggaXMgbW9yZSB2ZXJib3NlLiBgPGAgYW5k
IGA+YCBhZGQgbm8gdmFsdWUsIHRoZXkgYXJlIG5vaXNlLCBhbW9uZyBvdGhlciBx
dWlya3MgbGlrZSBgeyB9YCBibG9ja3MuCgpUaGF0IHNhaWQsIFJlYWN0IGRvZXMg
bm90IGhhdmUgYW4gb3V0LW9mLXRoZS1ib3ggZWFzeSBzb2x1dGlvbiBmb3IgSlMt
b25seSBtYXJrdXAsIGxlYWRpbmcgbW9zdCBkZXZlbG9wZXJzIHRvIGNob29zZSBK
U1gsIHVubGVzcyB0aGV5IGZpbmQgdGhpcmQtcGFydHkgbGlicmFyaWVzLiBIZXJl
IGFyZSBzb21lIGV4YW1wbGVzOgoKKipSZWFjdC5jcmVhdGVFbGVtZW50IG9yIFJl
YWN0LmNyZWF0ZUZhY3RvcnkgYm9pbGVycGxhdGUuKiogVG8gd3JpdGUgSlMtb25s
eSBtYXJrdXAgd2l0aCBSZWFjdCwgeW91IGhhdmUgdG8gdXNlIGVpdGhlciBvZiB0
aG9zZSB0d28uCgp7JSBoaWdobGlnaHQganMgJX0KUmVhY3QuY3JlYXRlRWxlbWVu
dCgndWwnLCBudWxsLCBbCiAgUmVhY3QuY3JlYXRlRWxlbWVudCgnbGknLCBudWxs
LCAnRm9vJyksCiAgUmVhY3QuY3JlYXRlRWxlbWVudCgnbGknLCBudWxsLCAnQmFy
JyksCl0pCnslIGVuZGhpZ2hsaWdodCAlfQoKb3IKCnslIGhpZ2hsaWdodCBqcyAl
fQpjb25zdCBoID0gUmVhY3QuY3JlYXRlRWxlbWVudDsKCmgoJ3VsJywgbnVsbCwg
WwogIGgoJ2xpJywgbnVsbCwgJ0ZvbycpLAogIGgoJ2xpJywgbnVsbCwgJ0Jhcicp
LApdKQp7JSBlbmRoaWdobGlnaHQgJX0KCm9yCgp7JSBoaWdobGlnaHQganMgJX0K
Y29uc3QgdWwgPSBSZWFjdC5jcmVhdGVGYWN0b3J5KCd1bCcpOwpjb25zdCBsaSA9
IFJlYWN0LmNyZWF0ZUZhY3RvcnkoJ2xpJyk7Cgp1bChudWxsLCBbCiAgbGkobnVs
bCwgJ0ZvbycpLAogIGxpKG51bGwsICdCYXInKSwKXSkKeyUgZW5kaGlnaGxpZ2h0
ICV9CgpXaXRoIHRoZSBhZGRpdGlvbmFsIGNvbXBsaWNhdGlvbiB0aGF0IG5vdCBh
bGwgZmFjdG9yaWVzIGNhbiBiZSBnYXRoZXJlZCBhbmQgcGFja2FnZWQgYXMgYSB1
dGlsaXR5LCBzaW5jZSB3ZSBtaWdodCBuZWVkIHRvIG1ha2UgYSBmYWN0b3J5IGZv
ciBhIGN1c3RvbSBjb21wb25lbnQ6Cgp7JSBoaWdobGlnaHQganMgJX0KY29uc3Qg
TXlCdXR0b24gPSBSZWFjdC5jcmVhdGVGYWN0b3J5KE15UGFja2FnZS5NeUJ1dHRv
bik7Cgp1bChudWxsLCBbCiAgTXlCdXR0b24oe215UHJvcDogMTIzfSkKXSkKeyUg
ZW5kaGlnaGxpZ2h0ICV9CgpPdmVyYWxsLCBoYXZpbmcgdG8gaGFuZGxlIGNyZWF0
ZUZhY3Rvcnkgb3IgY3JlYXRlRWxlbWVudCBieSB5b3Vyc2VsZiBpcyBib2lsZXJw
bGF0ZSBhbmQgbm90IG5lY2Vzc2FyaWx5IGxlc3MgdmVyYm9zZSB0aGFuIHNpbXBs
eSBKU1guCgoqKlByb3BzIG9iamVjdCBhbHdheXMgZXhwZWN0ZWQqKgoKSW4gQ3lj
bGUuanMgeW91IGNhbiBvbWl0IHRoZSBwcm9wcyBvYmplY3QuIFNpbmNlIHByb3Bz
IGFyZSBhbHdheXMgYW4gb2JqZWN0IGFuZCBjaGlsZHJlbiBhcmUgYWx3YXlzIGFu
IGFycmF5LCBpdCdzIG9idmlvdXMgd2hpY2ggcGFyYW1ldGVyIGlzIHdoYXQ6Cgp7
JSBoaWdobGlnaHQganMgJX0KdWwoWwogIGxpKCdGb28nKSwKICBsaSgnQmFyJyks
Cl0pCi8vIHRoZSBzYW1lIGFzCnVsKG51bGwsIFsKICBsaShudWxsLCAnRm9vJyks
CiAgbGkobnVsbCwgJ0JhcicpLApdKQp7JSBlbmRoaWdobGlnaHQgJX0KClRoYXQg
aXMgbm90IHRydWUgaW4gUmVhY3QuIFlvdSBhbHdheXMgbmVlZCB0byBwcm92aWRl
IHRoZSBwcm9wZXJ0aWVzIG9iamVjdC4gSWYgbm90IG5lZWRlZCwgdGhlbiBpdCBz
aG91bGQgYmUgYG51bGxgIG9yIGB7fWAuIFRoaXMganVzdCBhZGRzIHZlcmJvc2l0
eS9ub2lzZS4K7AoqKkNvbXBvbmVudHMgdGhhdCBleHBlY3QgIm9ubHlDaGlsZCIq
KgoKU29tZSBSZWFjdCBjb21wb25lbnRzIGhhdmUgYW4gaW52YXJpYW50OiAiSW52
YXJpYW50IFZpb2xhdGlvbjogb25seUNoaWxkIG11c3QgYmUgcGFzc2VkIGEgY2hp
bGRyZW4gd2l0aCBleGFjdGx5IG9uZSBjaGlsZCIuIFdoaWNoIG1lYW5zIHRoaXMg
aXMgYW4gZXJyb3I6Cgp7JSBoaWdobGlnaHQganMgJX0KU29tZUNvbXBvbmVudChu
dWxsLCBbCiAgQnV0dG9uKG51bGwsICdTdWJtaXQnKQpdKQp7JSBlbmRoaWdobGln
aHQgJX0KCkFuZCB0aGlzIGlzIGNvcnJlY3Q6Cgp7JSBoaWdobGlnaHQganMgJX0K
U29tZUNvbXBvbmVudChudWxsLAogIEJ1dHRvbihudWxsLCAnU3VibWl0JykKKQp7
JSBlbmRoaWdobGlnaHQgJX0KClRoaXMgaXMgYSBnb3RjaGEgdGhhdCBtYWtlcyBp
dCBhbm5veWluZyB0byBkZXZlbG9wLCB3aGVyZWFzIHdpdGggW2h5cGVyc2NyaXB0
LWhlbHBlcnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9vaGFuaGkvaHlwZXJzY3JpcHQt
aGVscGVycykgb3IgRWxtLCBjaGlsZHJlbiBhcmUgKGludHVpdGl2ZWx5KSBhbiBh
cnJheS9saXN0LgoKUmVhY3QgYXV0aG9ycyBkb24ndCB0cnkgdG8gc3VwcG9ydCB0
aGUgSlMtb25seSBSZWFjdCB3b3JrZmxvdyB0aGF0IG11Y2guIFRoZXkgbGV0IHlv
dSBmaWd1cmUgaXQgb24geW91ciBvd24gYW5kIGp1c3QgcmVjb21tZW5kIEpTWC4g
QWNoaWV2aW5nIGFuIGVyZ29ub21pYyBKUy1vbmx5IG1hcmt1cCB3b3JrZmxvdyBp
cyBlYXN5IGFuZCBoYXMgYmVlbiBkb25lIGluIG90aGVyIGxpYnJhcmllcyAoc2Vl
IGh5cGVyc2NyaXB0LWhlbHBlcnMpLCB0aGVzZSBwcm9ibGVtcyBtZW50aW9uZWQg
YWJvdmUgYXJlIG5vdCBpbmhlcmVudCB0byBKUy1vbmx5IG1hcmt1cCwgdGhleSBh
cmUgaW5oZXJlbnQgdG8gUmVhY3QncyBwYXJ0aWN1bGFyIEFQSS4gRWl0aGVyIHdh
eSwgd2l0aCBSZWFjdCdzIEpTWCBvciBSZWFjdCdzIEpTLW9ubHkgbWFya3VwLCB3
ZSBhcmUgd3JpdGluZyBzdWJvcHRpbWFsIGNvZGUgd2l0aCByZWdhcmQgdG8gc2ln
bmFsLXRvLW5vaXNlLgoKPGgyIGlkPSJmdW5jdGlvbmFsLWJ1dC1ub3QtcmVhbGx5
IiBjbGFzcz0iaHIiPjxzcGFuIGNsYXNzPSJociI+RlVOQ1RJT05BTCBCVVQgTk9U
IFJFQUxMWTwvc3Bhbj48L2gyPgoKUmVhY3QncyBjb21tdW5pdHkgY2xhaW1zIHRo
YXQgUmVhY3QgdXNlcyBmdW5jdGlvbmFsIHRlY2huaXF1ZXMgaGVhdmlseSwgaG93
ZXZlciB0aGF0IGlzIG5vdCB0cnVlIGluIHByYWN0aWNlLiBPT1AsIGNsYXNzZXMs
IGNhbGxiYWNrcywgYW5kIGB0aGlzYCBhcmUgY29tbW9ucGxhY2UsIGFzIHdlbGwg
YXMgaW1wZXJhdGl2ZSBtZXRob2QgY2FsbHMgc3VjaCBhcyBgZGlzcGF0Y2hgLCBg
c2V0U3RhdGVgLCBldGMuIFRoaXMgYWxzbyBtZWFucyB0aGVyZSBpcyBubyBjbGVh
ciBpbnRlcmZhY2UvZ2F0ZSBmb3IgSS9PIGFuZCBlZmZlY3RzLiBJbiBDeWNsZS5q
cywgYWxsIHJlYWQgZWZmZWN0cyBhcmUgaW5wdXRzIGludG8gdGhlIGBtYWluKClg
IGZ1bmN0aW9uLCBhbmQgYWxsIHdyaXRlIGVmZmVjdHMgYXJlIG91dHB1dHMgb2Yg
YG1haW4oKWAuIEluIEVsbSwgSS9PIGhhcHBlbnMgdGhyb3VnaCBwb3J0cyBvciBg
bWFpbmAsIG5vd2hlcmUgZWxzZS4gSW4gUmVhY3QvUmVkdXgsIHdlIGRvbid0IGhh
dmUgc3VjaCBndWlkZWxpbmUsIHlvdSBjYW4gc3ByZWFkIGVmZmVjdHMgYW55d2hl
cmUsIHdoaWNoIG1ha2VzIHRoZSAibW9kZWwgZWFzeSB0byByZWFzb24gYWJvdXQi
IGNsYWltIGNydW1ibGUuCgpBcyBbRGFuIEFicmFtb3YgcG9pbnRlZCBvdXQganVz
dCB0b2RheV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9kYW5fYWJyYW1vdi9zdGF0dXMv
Njg5NjM5NTgyMTIwNDE1MjMyKSwgdGhlcmUgaXMgbm8gZGUtZmFjdG8gc3RhbmRh
cmQgZm9yIEkvTywgZWZmZWN0cywgYW5kIGFzeW5jIGluIHRoZSBSZWFjdC9SZWR1
eCBjb21tdW5pdHkuIFRoZSBleGlzdGluZyBzb2x1dGlvbnMgYXJlIGludGVyZXN0
aW5nIGFuZCBlbGVnYW50IGluIHRoZW1zZWx2ZXMsIGJ1dCB0aGUgcHJvYmxlbSBv
ZiBJL08gaXMgc3lzdGVtaWMgc2luY2UgUmVhY3QgZG9lcyBub3Qgc3BlY2lmeSBh
IGNsZWFyIGludGVyZmFjZS9nYXRlIGZvciBlZmZlY3RzIGNvbWluZyBpbiBvciBn
b2luZyBvdXQuIGBSZWFjdC5yZW5kZXJgIGZvciBpbnN0YW5jZSBpcyBhbiBlZmZl
Y3QsIGJ1dCBpdCdzIG5vdCB0eXBpY2FsbHkgaGFuZGxlZCBieSBzdWNoIHJlZHV4
IGVmZmVjdHMgbGlicmFyaWVzLiBJbiBDeWNsZSBhbmQgRWxtLCBldmVuIHZpcnR1
YWwgRE9NIHJlbmRlcmluZyBuZWVkcyB0byBwYXNzIHRocm91Z2ggdGhlIGV4cGxp
Y2l0IEkvTyBnYXRlLiBBbGwgb2YgdGhpcyBhZGRzIHRvIGEgInNwYWdoZXR0aSBl
ZmZlY3QiIGluIFJlYWN0L1JlZHV4OiBzb21lIGVmZmVjdHMgYXJlIHdlbGwgc2Vw
YXJhdGVkLCBvdGhlcnMgYXJlIG1peGVkIGVsc2V3aGVyZS4KClBsYWNpbmcgYXN5
bmMgZWZmZWN0cyBhbHNvIG9mdGVuIGhhcHBlbnMgaW4gc29tZSBjb21wb25lbnQn
cyBgY29tcG9uZW50RGlkTW91bnRgLCB3aGljaCBpcyBhbiBhZC1ob2Mgc29sdXRp
b24sIHNpbmNlIGNvbXBvbmVudHMgYXJlIG9mdGVuIG1lYW50IG9ubHkgZm9yIHZp
ZXcgY29uY2VybnMgKG1hcmt1cCkuIEl0IG9mdGVuIGZlZWxzIGluY29ycmVjdCB0
byBtaXggdGhlc2UgY29uY2VybnMgc2luY2UgUmVkdXggYW5kIGl0cyBhc3luYyBz
b2x1dGlvbnMgYXJlIG1lYW50IHRvIHNlcGFyYXRlIHRoZW0gZnJvbSBtYXJrdXAu
Cgo8aDIgaWQ9ImNvbmNsdXNpb24iIGNsYXNzPSJociI+PHNwYW4gY2xhc3M9Imhy
Ij5DT05DTFVTSU9OPC9zcGFuPjwvaDI+CgpBcyBhICoqcGFyYWRpZ20qKiB0byBy
ZWFzb24gYWJvdXQgYW5kIGdldCBmZWF0dXJlcyBkb25lLCBSZWFjdC9SZWR1eCBh
ZGRzIHZlcmJvc2l0eSBhbmQgZG9lcyBub3QgcHJvdmlkZSBzdHJ1Y3R1cmVzIGZv
ciBzZXBhcmF0aW5nIGNvbmNlcm5zIChJIGFtIG5vdCB0YWxraW5nIGFib3V0IHNl
cGFyYXRpb24gb2YgdGVjaG5vbG9naWVzIHN1Y2ggYXMgSFRNTC9DU1MpLiBSZWFj
dC9SZWR1eCBoYXMgYSBncmVhdCBjb21tdW5pdHkvZWNvc3lzdGVtLCB3aGljaCBt
aWdodCBiZSBpbXBvcnRhbnQgaW4gbWFraW5nIGEgY2hvaWNlLiBSZWFjdC9SZWR1
eCBhbHNvIHN1cHBvcnRzIGFsbCBmZWF0dXJlcyB5b3Ugd2lsbCBuZWVkLCB3aGlj
aCBtaWdodCBiZSBpbXBvcnRhbnQgZm9yIGEgYnVzaW5lc3MgZGVjaXNpb24uIEhv
d2V2ZXIgaW4gdGhvc2UgY2FzZXMgd2hlcmUgbmVpdGhlciBsYXJnZSBjb21tdW5p
dHkgbm9yIGZlYXR1cmUgY292ZXJhZ2UgYXJlIGVzc2VudGlhbCwgUmVhY3QvUmVk
dXggZmFsbHMgc2hvcnQuIEFuZCB0aG9zZSBjYXNlcyBhcmUgbm90IHJhcmUuCgpP
bmNlIHlvdSBsZWFybiBFbG0gb3IgQ3ljbGUsIGdldHRpbmcgdGhpbmdzIGRvbmUg
d2lsbCBiZSBtb3JlIHByb2R1Y3RpdmUsIGxlc3MgaW5kaXJlY3QsIGxlc3MgdmVy
Ym9zZSwgbW9yZSBvcmdhbml6ZWQuIEFsbCBvZiB0aGUgSmF2YVNjcmlwdCBkZXZl
bG9wZXJzIHdobyBJIG1ldCB0aGF0IGxlYXJuZWQgYW5kIHVzZWQgRWxtIHNvIGZh
ciBoYXZlIGJlZW4gZXh0cmVtZWx5IHBvc2l0aXZlIGFib3V0IHRoZWlyIGV4cGVy
aWVuY2UuIFRoZSBvbmx5IEVsbSB1c2VycyB3aG8gSSd2ZSBzZWVuIGRpc2FwcG9p
bnRlZCBvZnRlbiBjb21lIGZyb20gYSBoYXJkLWNvcmUgZnVuY3Rpb25hbCBwcm9n
cmFtbWluZyBIYXNrZWxsIGJhY2tncm91bmQsIGFuZCBhcmUgdGhlcmVmb3JlIG1v
cmUgY29tZm9ydGFibGUgd2l0aCBQdXJlU2NyaXB0LiBFbG0gZG9lcyBub3QgaGF2
ZSB0eXBlY2xhc3NlcyBhbmQgb3RoZXIgZmVhdHVyZXMgd2hpY2ggbWFrZXMgaXQg
bGVzcyBhcHBlYWxpbmcgZm9yIGhhcmQtY29yZSBmdW5jdGlvbmFsIHByb2dyYW1t
ZXJzLiBUaGF0IHNhaWQsIEVsbSBpcyBhIGxhbmd1YWdlIHRoYXQgYXBwZWFscyB0
byBkZXZlbG9wZXJzIHdpdGggYSBKYXZhU2NyaXB0IGJhY2tncm91bmQgd2hvIG9u
bHkgd2FudCB0byBnZXQgdGhpbmdzIGRvbmUsIHdpdGhvdXQgbGVhcm5pbmcgY2F0
ZWdvcnkgdGhlb3J5IG9yIGVtYnJhY2luZyDraGlnaGx5IGFic3RyYWN0IGNvbmNl
cHRzLiBJdCBtYWtlcyB0aGUgY29yZSBiZW5lZml0cyBvZiBmdW5jdGlvbmFsIHBy
b2dyYW1taW5nIG11Y2ggbW9yZSBhY2Nlc3NpYmxlLiBMZWFybmluZyBpdCBpcyBh
IHdvcnRod2hpbGUgaW52ZXN0bWVudCwgSSBoYXZlIHdpdG5lc3NlZCB0aHJlZSBk
ZXZlbG9wZXJzIGF0IHdvcmsgcGljayBpdCB1cCBpbiBhIGZldyBkYXlzIGFuZCBi
ZSBib3RoIHByb2R1Y3RpdmUgYW5kIGhhcHB5IGZvciB0aGUgc3Vic2VxdWVudCB3
ZWVrcy4KCldpdGggQ3ljbGUuanMsIEkgaGF2ZSB3aXRuZXNzZWQgdHdvIGRldmVs
b3BlcnMgdW5kZXJzdGFuZCBpdCBpbiBhIGZldyBkYXlzIGFuZCBlbmpveSBpdCdz
IHNpbXBsaWNpdHksIGJ1dCBJJ2xsIHJlZnJhaW4gZnJvbSBzcGVha2luZyBtdWNo
IGFib3V0IEN5Y2xlLmpzIHNpbmNlIEknbSBiaWFzZWQuIFRoZSBnb2FsIG9mIGJv
dGggRWxtIGFuZCBDeWNsZS5qcyBpcyB0byBwcm92aWRlIGEgcGFyYWRpZ20gdG8g
Z2V0IGZlYXR1cmVzIGRlbGl2ZXJlZCBpbiBhbiBlbmpveWFibGUgbWFubmVyIHdp
dGggZ29vZCBzaWduYWwtdG8tbm9pc2UuIFN1Y2ggcGFyYWRpZ20gaXMgY3VycmVu
dGx5IHVuYWNoaWV2YWJsZSB3aXRoIFJlYWN0L1JlZHV4IHVubGVzcyBpdCBpcyBy
ZWludmVudGVkLCBiZWNhdXNlIGEgcGFyYWRpZ20gaXMgdGhlIGZvdW5kYXRpb24u
IEVsbSBpcyBrbm93biB0byBub3QgcHJvcGVybHkgc3VwcG9ydCBzZXJ2ZXItc2lk
ZSByZW5kZXJpbmcsIHNvIGZyb20gYSBmZWF0dXJlIGNvdmVyYWdlIHBlcnNwZWN0
aXZlLCBSZWFjdCBpcyBiZXR0ZXIgaW4gdGhhdCByZWdhcmQuIEhvd2V2ZXIsIHNl
cnZlci1zaWRlIHJlbmRlcmluZyBpbiBFbG0gY2FuIGJlIGFkZGVkIGFuZCBbdGhl
cmUgaXMgb25nb2luZyB3b3JrIHRvIGFjaGlldmUgdGhhdF0oaHR0cHM6Ly9naXRo
dWIuY29tL05vUmVkSW5rL3Rha2UtaG9tZSkuIEhvd2V2ZXIsIGEgImdvb2QiIHBh
cmFkaWdtIGNhbm5vdCBiZSBhZGRlZCB0byBSZWFjdC9SZWR1eC4gSXQgaXMgYSBm
b3VuZGF0aW9uLCBhbmQgY2FuIG9ubHkgYmUgcmVwbGFjZWQuCgpPbmUgY291bGQg
YXJndWUgdGhhdCBwYXJhZGlnbXMgYWx3YXlzIGhhdmUgdHJhZGVvZmZzLCBhbmQg
SSBoYXZlIHRvIGFncmVlLiBUaGUgUmVhY3QvUmVkdXggcGFyYWRpZ20gbWlnaHQg
aGF2ZSBiZW5lZml0cyB0aGF0IHRoZSBDeWNsZSBwYXJhZGlnbSBvciBFbG0gcGFy
YWRpZ20gZG9uJ3Qgb2ZmZXIuIEJ1dCBqdXN0IGxpa2UgaG9yc2VzIGFuZCBjYXJz
IGhhdmUgdHJhZGVvZmZzIGZvciB0cmFuc3BvcnRpbmcgcGVvcGxlLCBvbmUgb2Yg
dGhlbSBpcyBhIGNsZWFyIHdpbm5lciwgZGVzcGl0ZSBkaXNhZHZhbnRhZ2VzIChj
YXJzIGNhbiBvbmx5IGRyaXZlIG9uIGFzcGhhbHQsIGRyaXZpbmcgY2FycyBuZWVk
IG1vcmUgdHJhaW5pbmcsIGV0YykuCgpBcyBhIHJlbWluZGVyLCB0aGVyZSBhcmUg
bXVsdGlwbGUgYXNwZWN0cyB0byBjb25zaWRlciB3aGVuIHBpY2tpbmcgYSBGcm9u
dGVuZCB0ZWNobm9sb2d5OgoKLSBMZWFybmluZyBjb3N0Ci0gUGFyYWRpZ20gZXJn
b25vbXkKLSBDb21tdW5pdHkgc2l6ZQotIEZlYXR1cmUgY292ZXJhZ2UKClJlYWN0
L1JlZHV4IGlzIGNsZWFybHkgc3VwZXJpb3IgaW4gc29tZSwgYnV0IG5vdCBpbiBh
bGwgdGhlc2UgYXNwZWN0cy4gTmVpdGhlciBpcyBDeWNsZSBncmVhdCBpbiBhbGwg
YXNwZWN0cy4gVGhlIHNhbWUgY2FuIGJlIHNhaWQgZm9yIEVsbS4gVGhpcyBwb3N0
IGlzIGp1c3QgdG8gY2xhcmlmeSBob3cgUmVhY3QvUmVkdXggaXMgbm90IHRoZSBi
ZXN0IGluIHRoZSAiUGFyYWRpZ20gZXJnb25vbXkiIGFzcGVjdC4KCkFzIGEgY29u
Y2x1c2lvbiwgbXkgbWVzc2FnZSB0byB0aGUgRnJvbnRlbmQgY29tbXVuaXR5IGlz
IHRvIGNvbnRpbnVlIHNlYXJjaGluZyBmb3IgYmV0dGVyIHNvbHV0aW9ucy4gT24g
VHdpdHRlciwgSSBoYXZlIHNlZW4gcmVzcGVjdGFibGUgcGVvcGxlIGNsYWltaW5n
ICJ3ZSBzaG91bGQgZGVjbGFyZSBSZWFjdC9SZWR1eCBhcyB0aGUgd2lubmVyLiBX
ZSBjYW4gZmluYWzpbHkgc3RvcCBldm9sdmluZyIgYW5kIEkgZnVsbHkgZGlzYWdy
ZWUuICpFdmVuIHdpdGggc29sdXRpb25zIGxpa2UgRWxtIGFuZCBDeWNsZSogd2Ug
Y2FuJ3QgY29uc2lkZXIgRnJvbnRlbmQgZGV2ZWxvcG1lbnQgc29sdmVkLCB3ZSBu
ZWVkIHRvIGNvbnRpbnVlIHNlZWtpbmcgZm9yIGltcHJvdmVtZW50cyB0byBvdXIg
d29ya2Zsb3cuIEkgYW0gbm90IHNheWluZyBDeWNsZS5qcyBpcyBwZXJmZWN0IGVp
dGhlci4gSWYgeW91IGhhdmUgYW55IGZlZWRiYWNrIG9yIGlmIGFueXRoaW5nIGlz
IOKAnGluZmVyaW9y4oCdLCBJIGFtIG9wZW4gdG8gZmVlZGJhY2suIElmIHlvdSB3
YW50IHRvIGxlYXJuIEN5Y2xlLmpzLCBpdCB0YWtlcyBqdXN0IFsxaCAzMG1pbiB0
byBsZWFybiB0aHJvdWdoIHRoZXNlIGZyZWUgRWdnaGVhZCB2aWRlbyBjb3Vyc2Vz
XShodHRwczovL2VnZ2hlYWQuaW8vc2VyaWVzL2N5Y2xlLWpzLWZ1bmRhbWVudGFs
cykuCgpUaGUgRnJvbnRlbmQgY29tbXVuaXR5IGhhcyBzZWVuIG1ham9yIGnnbXBy
b3ZlbWVudHMgaGFwcGVuaW5nIG11bHRpcGxlIHRpbWVzLCBmaXJzdCB3aXRoIGpR
dWVyeSBldCBhbCwgdGhlbiBCYWNrYm9uZSwgdGhlbiBBbmd1bGFyLCBhbmQgbm93
IFJlYWN0LiBMZXQncyBub3Qgc3RvcCB0aGVyZS7gCgDCwFwEAAEKABAFAlg2HGsJ
EJ7eI+p+ikiQAADtrggAgs1eipjNJ3+f4aanc1md9F2OY5BzF3HQolZ1a7TUBtbT
brqIh9wH3DISkJxQVZE1m+GPNN+PBtq8OUkOrfAJqfPmeqHjvfXgiRxDzI1EnUMJ
O5c+DzJgBHOPeke0shY4GEQIg0THXTu70/4wczDxDXr3yof6PlLDHp/tnguybaOT
3hk8Y9Mk3jB4IZxeWkBkQpzPdpVpShy5TJY+FUa2Dw0E5SkyDMmI5NKD5kjf6HK/
qcmOuzyJ0Vc3u4+/t8bKnCrQ7K9uzFS0h5NHSy7o7fJ/tLvDq7dXQGSg8Ti1AI70
z/oo4lCNdhyRMrnxNDn4itIlU/vRk3RKvaJMhqtDTw==
=fbjg
-----END PGP MESSAGE-----
