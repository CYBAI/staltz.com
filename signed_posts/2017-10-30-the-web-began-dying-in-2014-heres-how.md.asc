-----BEGIN PGP MESSAGE-----
Version: Keybase Go 1.0.34 (darwin)
Comment: https://keybase.io/download

xA0DAAoBnt4j6n6KSJABy+F0AOIAAAAA7i0tLQpsYXlvdXQ6IHBvc3QKdGl0bGU6
ICJUaGUgV2ViIGJlZ2FuIGR5aW5nIGluIDIwMTQsIGhlcmUncyBob3ciCnRhZ3M6
IFtibG9nXQotLS0KCkJlZm9yZSB0aGUgeWVhciAyMDE0LCB0aGVyZSB3ZXJlIG1h
bnkgcGVvcGxlIHVzaW5nIEdvb2dsZSwgRmFjZWJvb2ssIGFuZCBBbWF6b24uIFRv
ZGF5LCB0aGVyZSBhcmUgc3RpbGwgbWFueSBwZW9wbGUgdXNpbmcgc2VydmljZXMg
ZnJvbSB0aG9zZSB0aHJlZSB0ZWNoIGdpYW50cyAocmVzcGVjdGl2ZWx5LCBHT09H
LCBGQiwgQU1aTikuIE5vdCBtdWNoIGhhcyBjaGFuZ2VkLCBhbmQgcXVpdGUgbGl0
ZXJhbGx5IHRoZSB1c2VyIGludGVyZmFjZSBhbmQgZmVhdHVyZXMgb24gdGhvc2Ug
c2l0ZXMgaGFzIHJlbWFpbmVkIG1vc3RseSB1bnRvdWNoZWQuIEhvd2V2ZXIsIHRo
ZSB1bmRlcmx5aW5nIGR5bmFtaWNzIG9mIHBvd2VyIG9uIHRoZSBXZWIgaGF2ZSBk
cmFzdGljYWxseSBjaGFuZ2VkLCBhbmQgdGhvc2UgdGhyZWUgY29tcGFuaWVzIGFy
ZSBhdCB0aGUgY2VudGVyIG9mIGEgZnVuZGFtZW50YWwgdHJhbnNmb3JtYXRpb24g
b2YgdGhlIFdlYi4KCj4gKkl0IGxvb2tzIGxpa2Ugbm90aGluZyBjaGFuZ2VkIHNp
bmNlIDIwMTQsIGJ1dCBHT09HIGFuZCBGQiBub3cgaGF2ZSBkaXJlY3QgaW5mbHVl
bmNlIG92ZXIgNzAlKyBvZiBpbnRlcm5ldCB0cmFmZmljLioKCkludGVybmV0IGFj
dGl2aXR5IGl0c2VsZiBoYXNuJ3Qgc2xvd2VkIGRvd24uIEl0IG1haW50YWlucyBh
IHN0ZWFkeSBncm93dGgsIGJvdGggaW4gYW1vdW50IG9mIHVzZXJzIGFuZCBhbW91
bnQgb2Ygd2Vic2l0ZXM6CgpbIVtBbW91bnQgb2YgaW50ZXJuZXQgdXNlcnMgYW5k
IHdlYnNpdGVzIGZyb20gMjAxMSB0byAyMDE3XSgvaW1nL2NoYXJ0LXNpdGVzLWFu
ZC11c2Vycy5wbmcpXSgvaW1nL2NoYXJ0LXNpdGVzLWFuZC11c2Vycy5wbmcpCgoo
U291cmNlczogW2h0dHBzOi8vbmV3cy5uZXRjcmFmdC5jb20vYXJjaGl2ZXMvY2F0
ZWdvcnkvd2ViLXNlcnZlci1zdXJ2ZXldKGh0dHBzOi8vbmV3cy5uZXRjcmFmdC5j
b20vYXJjaGl2ZXMvY2F0ZWdvcnkvd2ViLXNlcnZlci1zdXJ2ZXkpIGFuZCBbaHR0
cDovL3d3dy5pbnRlcm5ldGxpdmVzdGF0cy5jb20vaW50ZXJuZXQtdXNlcnMvXSho
dHRwOi8vd3d3LmludGVybmV0bGl2ZXN0YXRzLmNvbS9pbnRlcm5ldC11c2Vycy8p
KQoKV2hhdCBoYXMgY2hhbmdlZCBvdmVyIHRoZSBsYXN0IDQgeWVhcnMgaXMgbWFy
a2V0IHNoYXJlIG9mIHRyYWZmaWMgb24gdGhlIFdlYi4gSXQgbG9va3MgbGlrZSBu
b3RoaW5nIGhhcyBjaGFuZ2VkLCBidXQgR09PRyBhbmQgRkIgbm93IGhhdmUgZGly
ZWN0IGluZmx1ZW5jZSBvdmVyIDcwJSsgb2YgaW50ZXJuZXQgdHJhZmZpYy4gTW9i
aWxlIGludGVybmV0IHRyYWZmaWMgaXMgbm93IHRoZSBbbWFqb3JpdHkgb2YgdHJh
ZmZpYyB3b3JsZHdpZGVdKGh0dHBzOi8vd3d3LnN0YXRpc3RhLmNvbS9zdGF0aXN0
aWNzLzMwNjUyOC9zaGFyZS1vZi1tb2JpbGUtaW50ZXJuZXQtdHJhZmZpYy1pbi1n
bG9iYWwtcmVnaW9ucy8pIGFuZCBpbiBMYXRpbiBBbWVyaWNhIGFsb25lLCBHT09H
IGFuZCBGQiBzZXJ2aWNlcyBoYXZlIGhhZCA2MCUgb2YgbW9iaWxlIHRyYWZmaWMg
aW4gMjAxNSwgZ3Jvd2luZyB0byA3MCUgYnkgdGhlIGVuZCBvZiAyMDE2LiBUaGUg
cmVtYWluaW5nIDMwJSBvZiB0cmFmZmljIGlzIHNoYXJlZCBhbW9uZyBhbGwgb3Ro
ZXIgbW9iaWxlIGFwcHMgYW5kIHdlYnNpdGVzLiBNb2JpbGUgZGV2aWNlcyBhcmUg
cHJpbWFyaWx5IHVzZWQgZm9yIGFjY2Vzc2luZyBHT09HIGFuZCBGQiBuZXR3b3Jr
cy4KClshW1NoYXJlIG9mIGludGVybmV0IHRyYWZmaWMgaW4gTGF0aW4gQW1lcmlj
YSBmcm9tIDIwMTUgdG8gMjAxNl0oL2ltZy9pbnRlcm5ldC1sYXRpbi1hbWVyaWNh
LTIwMTYucG5nKV0oL2ltZy9pbnRlcm5ldC1sYXRpbi1hbWVyaWNhLTIwMTYucG5n
KQoKKFNvdXJjZTogW2h0dHBzOi8vd3d3LnNhbmR2aW5lLmNvbS9yZXNvdXJjZXMv
Z2xvYmFsLWludGVybmV0LXBoZW5vbWVuYS8yMDE2L25vcnRoLWFtZXJpY2EtYW5k
LWxhdGluLWFtZXJpY2EuaHRtbF0oaHR0cHM6Ly93d3cuc2FuZHZpbmUuY29tL3Jl
c291cmNlcy9nbG9iYWwtaW50ZXJuZXQtcGhlbm9tZW5hLzIwMTYvbm9ydGgtYW1l
cmljYS1hbmQtbGF0aW4tYW1lcmljYS5odG1sKSkKCj4gKlRoZSBwcmVzcywgdW5s
aWtlIGJlZm9yZSwgZGVwZW5kcyBvbiBHT09HLUZCIHRvIHN0YXkgaW4gYnVzaW5l
c3MuKgoKQW5vdGhlciBkZW1vbnN0cmF0aW9uIG9mIEdPT0cgYW5kIEZCIGRvbWlu
YW5jZSBjYW4gYmUgc2VlbiBhbW9uZyBtZWRpYSB3ZWJzaXRlcy4gVGhlIG1vc3Qg
cG9wdWxhciB3ZWIgcHJvcGVydGllcyB0aGF0IGRvbid0IGJlbG9uZyB0byBHT09H
IG5vciBGQiBhcmUgdXN1YWxseSBmcm9tIHRoZSBwcmVzcy4gRm9yIGluc3RhbmNl
LCBpbiB0aGUgVVNBIHRoZXJlIGFyZSBbNiBtZWRpYSBzaXRlcyBpbiB0aGUgdG9w
IDEwIHdlYnNpdGVzXShodHRwczovL3d3dy5zdGF0aXN0YS5jb20vc3RhdGlzdGlj
cy8yNzE0MTIvbW9zdC12aXNpdGVkLXVzLXdlYi1wcm9wZXJ0aWVzLWJhc2VkLW9u
LW51bWJlci1vZi12aXNpdG9ycy8pOyBpbiBCcmF6aWwgdGhlcmUgYXJlIFs2IG1l
ZGlhIHNpdGVzIGluIHRoZSB0b3AgMTBdKGh0dHBzOi8vd3d3LnN0YXRpc3RhLmNv
bS9zdGF0aXN0aWNzLzI1NDcyNy9tb3N0LXZpc2l0ZWQtd2ViLXByb3BlcnRpZXMt
aW4tYnJhemlsLyk7IGluIFVLIGl0IGlzIFs1IG91dCAxMF0oaHR0cHM6Ly93d3cu
c3RhdGlzdGEuY29tL3N0YXRpc3RpY3MvMjcyODcxL2xlYWRpbmctaW50ZXJuZXQt
cHJvcGVydGllcy1pbi10aGUtdWstYnktdW5pcXVlLXZpc2l0b3JzLykuCgpGcm9t
IHdoZXJlIGRvIG1lZGlhIHNpdGVzIGdldCB0aGVpciB0cmFmZmljPyBQcmlvciB0
byAyMDE0LCBTZWFyY2ggRW5naW5lIE9wdGltaXphdGlvbiAoU0VPKSB3YXMgYSBj
b21tb24gcHJhY3RpY2UgYW1vbmcgV2ViIERldmVsb3BlcnMgdG8gaW1wcm92ZSB0
aGVpciBzaXRlIGZvciBHb29nbGUgc2VhcmNoZXMsIHNpbmNlIGl0IGFjY291bnRl
ZCBmb3IgYXBwcm94aW1hdGVseSAzNSUgb2YgdHJhZmZpYywgd2hpbGUgbW9yZSB0
aGFuIDUwJSBvZiB0cmFmZmljIGNhbWUgZnJvbSB2YXJpb3VzIG90aGVyIHBsYWNl
cyBvbiB0aGUgV2ViLiBTRU8gd2FzIGltcG9ydGFudCwgd2hpbGUgRmFjZWJvb2sg
cHJlc2VuY2Ugd2FzIG5pY2UtdG8taGF2ZS4gT3ZlciB0aGUgbmV4dCAzIHllYXJz
LCB0cmFmZmljIGZyb20gRmFjZWJvb2sgZ3JldyB0byBiZSBhcHByb3hpbWF0ZWx5
IFs0NSVdKGh0dHA6Ly93d3cucmV1dGVycy5jb20vYXJ0aWNsZS91cy11c2EtaW50
ZXJuZXQtc29jaWFsbWVkaWEvdHdvLXRoaXJkcy1vZi1hbWVyaWNhbi1hZHVsdHMt
Z2V0LW5ld3MtZnJvbS1zb2NpYWwtbWVkaWEtc3VydmV5LWlkVVNLQ04xQkoyQTgp
LCBzdXJwYXNzaW5nIHRoZSBzdGF0dXMgdGhhdCBTZWFyY2ggdHJhZmZpYyBoYWQu
IEluIDIwMTcsIHRoZSBNZWRpYSBkZXBlbmRzIG9uIGJvdGggR29vZ2xlIGFuZCBG
YWNlYm9vayBmb3IgcGFnZSB2aWV3cywgc2luY2UgaXQncyB0aGUgbWFqb3JpdHkg
b2YgdGhlaXIgdHJhZmZpYy4KClshW1JlZmVycmFsIHNvdXJjZSBvZiB0cmFmZmlj
IHRvIHRvcCB3ZWIgcHVibGlzaGVyc10oL2ltZy9yZWZlcnJhbC10by10b3AtcHVi
bGlzaGVycy5wbmcpXSgvaW1nL3JlZmVycmFsLXRvLXRvcC1wdWJsaXNoZXJzLnBu
ZykKCihTb3VyY2U6IFtodHRwczovL2Jsb2cucGFyc2UubHkvcG9zdC8yODU1L2Zh
Y2Vib29rLWNvbnRpbnVlcy10by1iZWF0LWdvb2dsZS1pbi1zZW5kaW5nLXRyYWZm
aWMtdG8tdG9wLXB1Ymxpc2hlcnMvXShodHRwczovL2Jsb2cucGFyc2UubHkvcG9z
dC8yODU1L2ZhY2Vib29rLWNvbnRpbnVlcy10by1iZWF0LWdvb2dsZS1pbi1zZW5k
aW5nLXRyYWZmaWMtdG8tdG9wLXB1Ymxpc2hlcnMvKSkKClRoZSByZWxhdGlvbnNo
aXAgYmV0d2VlbiBtZWRpYSBzaXRlcyBhbmQgdGhlIHR3byB0ZWNoIGdpYW50cyBp
cyBbZGlmZmljdWx0XShodHRwczovL3d3dy50aGV2ZXJnZS5jb20vMjAxNy83LzEw
LzE1OTQ4MTk2KS4gSW4gMjAxNCwgRkIgYnVpbHQgRmFjZWJvb2sgUGFwZXIgYXMg
YW4gYXR0ZW1wdCB0byBoYXZlIGEgbGFyZ2VyIGNvbnRyb2wgb3ZlciBuZXdzIGNv
bnN1bXB0aW9uLiBUaGVpciB0YWN0aWMgZmFpbGVkLCBidXQgdGhlaXIgc3RyYXRl
Z3kgcGVyc2lzdGVkIHRocm91Z2ggZGlmZmVyZW50IG1lYW5zIHN1Y2ggYXMgRmFj
ZWJvb2sgSW5zdGFudCBBcnRpY2xlcy4gVGhlIG1lZGlhLCBiZWluZyBkZXBlbmRl
bnQgb24gc29jaWFsIHRyYWZmaWMgYW5kIHRocmVhdGVuZWQgYnkgdGhlIHNvY2lh
bCBiZWhlbW90aCwgcmVhY3RlZC4gVGhleSBbcHVsbGVkIG91dCBzdXBwb3J0IGZv
ciBJbnN0YW50IEFydGljbGVzXShodHRwczovL3d3dy50aGV2ZXJnZS5jb20vMjAx
Ny80LzE2LzE1MzE0MjEwKS4KCk1lYW53aGlsZSwgR09PRyBub3RpY2VzIGhvdyBp
dHMgU2VhcmNoIHRyYWZmaWMgaGFkbid0IGltcHJvdmVkLCB3aGlsZSBGYWNlYm9v
ayBoYWQgcGlja2VkIHVwIHN0ZWFtLCBzbyBHT09HIGxhdW5jaGVzIHRoZWlyIElu
c3RhbnQgQXJ0aWNsZXMgYWx0ZXJuYXRpdmUgY2FsbGVkIEFjY2VsZXJhdGVkIE1v
YmlsZSBQYWdlcyAoQU1QKSBhbmQgcHJvYWN0aXZlbHkgc3RhcnRzIHNlcnZpbmcg
YXJ0aWNsZXMgZnJvbSBHT09HIHNlcnZlcnMgaW5zdGVhZCBvZiBkaXJlY3Rpbmcg
dHJhZmZpYyB0byBtZWRpYSBzaXRlcy4gVGhlIHByZXNzIHJlYWN0cyBzaW1pbGFy
bHkgdG8gaG93IHRoZXkgZGlkIGZvciBGQjogcmVwb3J0ZWQgYm9sZCBzdG9yaWVz
IGFib3V0IHRoZSBTZWFyY2ggYmVoZW1vdGgncyB0aGlyc3QgZm9yIGNvbnRyb2wg
b3ZlciBuZXdzIGNvbnN1bXB0aW9uLgoKPiAqR09PRyBhbmQgRkIgY2Vhc2VkIGNv
bXBldGluZyBkaXJlY3RseSwgZm9jdXNpbmcgb24gd2hhdCB0aGV5IGRvIGJlc3Qg
aW5zdGVhZC4qCgpEYXRhIHNob3dzIEZCIGhhcyBkcmFtYXRpY2FsbHkgaW1wcm92
ZWQgaXRzIGRvbWluYW5jZSBvbiB0aGUgV2ViLCB3aGlsZSBHb29nbGUgU2VhcmNo
IGhhc24ndCBzaWduaWZpY2FudGx5IGNoYW5nZWQuIEhvdyBleGFjdGx5IGRpZCBG
QiBhY2hpZXZlIHRoYXQsIGFuZCB3aGF0IGV2ZW50cyB3ZXJlIGtleSB0byB0aGF0
IGRldmVsb3BtZW50PyBQcmlvciB0byAyMDE0LCBib3RoIGNvbXBhbmllcyBoYWQg
YSBwb3J0Zm9saW8gb2YgbXVsdGlwbGUgd2ViIHNlcnZpY2VzLiBHT09HIGhhZG4n
dCB5ZXQgYmVjb21lIEFscGhhYmV0LCBzbyBpdCdzIGZvY3VzIHdhcyBkaWZ1c2Vk
LiBHT09HIHdhcyB0cnlpbmcgdG8gZW50ZXIgdGhlIHNvY2lhbCBtYXJrZXQsIGZp
cnN0IHdpdGggR29vZ2xlIFdhdmUsIHRoZW4gR29vZ2xlIEJ1enosIE9ya3V0LCBh
bmQgR29vZ2xlKy4gSW4gdG90YWwsIFtHT09HIGhhcyBhY3F1aXJlZCAxOCBjb21w
YW5pZXMgZnJvbSB0aGUgc29jaWFsIG1lZGlhIGNhdGVnb3J5XShodHRwczovL3d3
dy5nZWNrb2JvYXJkLmNvbS90ZWNoLWFjcXVpc2l0aW9ucy8pLCBvZiB3aGljaCBv
bmx5IDEgYWNxdWlzaXRpb24gaGFwcGVuZWQgcG9zdC0yMDE0LCB3aGlsZSA1IG9m
IHRob3NlIGhhcHBlbmVkIGluIDIwMTAgYWxvbmUuIEZCIHdhcyBjb21wZXRpbmcg
aW4gdGhlIHNlYXJjaCBtYXJrZXQsIHRocm91Z2ggQmluZywgaW4gcGFydG5lcnNo
aXAgd2l0aCBNU0ZULgoKRHVyaW5nIDIwMTQsIEZCIGFwcGFyZW50bHkgcmVvcmdh
bml6ZWQgaXRzZWxmIHRvIGZvY3VzIG9uIHNvY2lhbCBvbmx5LiBJbiBGZWJydWFy
eSwgaXQgYm91Z2h0IFdoYXRzQXBwLCBmb3IgMTEgdGltZXMgdGhlIHByaWNlIEdP
T0cgYm91Z2h0IFlvdVR1YmUuIEluIERlY2VtYmVyLCBpdCBjYW5jZWxlZCBpdHMg
QmluZyBwYXJ0bmVyc2hpcCB3aXRoIE1TRlQuIFVzZXIgcmV0ZW50aW9uIG9uIEZh
Y2Vib29rLmNvbSBncmV3IHN0ZWFkaWx5IChzZWUgY2hhcnQgYmVsb3cpLiBUaHJv
dWdoIGl0cyBmb3VyIHNpbXBsZSBwcm9kdWN0cywgRmFjZWJvb2ssIFdoYXRzQXBw
LCBNZXNzZW5nZXIsIGFuZCBJbnN0YWdyYW0sIEZCIGhhZCBiZWNvbWUgdGhlIHNv
Y2lhbCBzdXBlcnBvd2VyLgoKWyFbRmFjZWJvb2sgZGFpbHkgYWN0aXZlIHVzZXJz
IChEQVUpIGRpdmlkZWQgYnkgRmFjZWJvb2sgbW9udGhseSBhY3RpdmUgdXNlcnMg
KE1BVSldKC9pbWcvZmFjZWJvb2stcmV0ZW50aW9uLnBuZyldKC9pbWcvZmFjZWJv
b2stcmV0ZW50aW9uLnBuZykKCihTb3VyY2VzOiBbaHR0cHM6Ly93d3cuc3RhdGlz
dGEuY29tL3N0YXRpc3RpY3MvMzQ2MTY3L2ZhY2Vib29rLWdsb2JhbC1kYXUvXSho
dHRwczovL3d3dy5zdGF0aXN0YS5jb20vc3RhdGlzdGljcy8zNDYxNjcvZmFjZWJv
b2stZ2xvYmFsLWRhdS8pIGFuZCBbaHR0cHM6Ly93d3cuc3RhdGlzdGEuY29tL3N0
YXRpc3RpY3MvMjY0ODEwL251bWJlci1vZi1tb250aGx5LWFjdGl2ZS1mYWNlYm9v
ay11c2Vycy13b3JsZHdpZGUvXShodHRwczovL3d3dy5zdGF0aXN0YS5jb20vc3Rh
dGlzdGljcy8yNjQ4MTAvbnVtYmVyLW9mLW1vbnRobHktYWN0aXZlLWZhY2Vib29r
LXVzZXJzLXdvcmxkd2lkZS8pKQoKU2ltaWxhcmx5LCBHT09HIGluIDIwMTQgc3Rh
cnRlZCByZW9yZ2FuaXppbmcgaXRzZWxmIHRvIGZvY3VzIG9uIGFydGlmaWNpYWwg
aW50ZWxsaWdlbmNlIG9ubHkuIEluIEphbnVhcnkgMjAxNCwgR09PRyBib3VnaHQg
RGVlcE1pbmQsIGFuZCBpbiBTZXB0ZW1iZXIgdGhleSBzaHV0ZG93biBPcmt1dCAo
b25lIG9mIHRoZWlyIGZldyBzb2NpYWwgcHJvZHVjdHMgd2hpY2ggaGFkIG1vbWVu
dGFyeSBzdWNjZXNzIGluIHNvbWUgY291bnRyaWVzKSBmb3JldmVyLiBUaGUgQWxw
aGFiZXQgSW5jIHJlc3RydWN0dXJpbmcgd2FzIGFubm91bmNlZCBpbiBBdWd1c3Qg
MjAxNSBidXQgaXQgbGlrZWx5IHRvb2sgbWFueSBtb250aHMgb2YgbWVldGluZ3Mg
YW5kIGJ1cmVvdWNyYWN5LiBUaGUgcmVzdHJ1Y3R1cmluZyB3YXMgaW1wb3J0YW50
IHRvIGZvY3VzIHRoZSB3ZWItb3JpZW50ZWQgZGVwYXJ0bWVudHMgYXQgR09PRyB0
b3dhcmRzIGEgc2ltcGxlIG1pc3Npb24uIEdPT0cgc2VlcyBubyBmdXR1cmUgaW4g
dGhlIHNpbXBsZSBTZWFyY2ggbWFya2V0LCBhbmQgYW5ub3VuY2VzIHRvIGJlIG1p
Z3JhdGluZyAiRnJvbSBTZWFyY2ggdG8gU3VnZ2VzdCIgKGluIEVyaWMgU2NobWlk
dCdzIFtvd24gd29yZHNdKGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9
SGdfS3hYaGhzR2cpKSBhbmQgYmVpbmcgYW4gIkFJIGZpcnN0IGNvbXBhbnkiIChp
biBTdW5kYXIgUGljaGFpJ3MgW293biB3b3Jkc10oaHR0cHM6Ly93d3cueW91dHVi
ZS5jb20vd2F0Y2g/dj04T2cyQm5wQmhrTSkpLiBHT09HIGlzIGN1cnJlbnRseSBz
bGlnaHRseSBiZWhpbmQgRkIgaW4gdGVybXMgb2YgaG93IGZhc3QgaXQgaXMgZ3Jv
d2luZyBpdHMgZG9taW5hbmNlIG9mIHRoZSB3ZWIsIGJ1dCBkdWUgdG8gdGhlaXIg
dGVjaG5pY2FsIGV4cGVydGlzZSwgdmFzdCBidWRnZXQsIGluZmx1ZW5jZSBhbmQg
dmlzaW9uLCBpbiB0aGUgbG9uZyBydW4gaXRzIEFJIGFzc2V0cyB3aWxsIHBsYXkg
YSBtYXNzaXZlIHJvbGUgb24gdGhlIGludGVybmV0LiBUaGV5IGtub3cgd2hhdCB0
aGV5IGFyZSBkb2luZy4KClRoZXNlIGFyZSBubyBsb25nZXIgdGhlIHNhbWUgY29t
cGFuaWVzIGFzIDQgeWVhcnMgYWdvLiBHT09HIGlzIG5vdCBhbnltb3JlIGFuIGlu
dGVybmV0IGNvbXBhbnksIGl0J3MgKnRoZSBrbm93bGVkZ2UgaW50ZXJuZXQgY29t
cGFueSouIEZCIGlzIG5vdCBhbiBpbnRlcm5ldCBjb21wYW55LCBpdCdzICp0aGUg
c29jaWFsIGludGVybmV0IGNvbXBhbnkqLiBUaGV5IHVzZWQgdG8gYXR0ZW1wdCB0
byBjb21wZXRlLCBhbmQgdGhpcyBjb21wZXRpdGlvbiBrZXB0IHRoZSBpbnRlcm5l
dCBtYXJrZXQgZGl2ZXJzZS4gVG9kYXksIGhvd2V2ZXIsIHRoZXkgc2VlbSBtb3N0
bHkgc2F0aXNmaWVkIHdpdGggdGhlaXIgb3J0aG9nb25hbCBkb21pbmFuY2Ugb2Yg
cGFydHMgb2YgdGhlIFdlYiwgYW5kIHdlIGFyZSBsb3NpbmcgZGl2ZXJzaXR5IG9m
IGNob2ljZXMuIFdoaWNoIGxlYWRzIHVzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUg
aW50ZXJuZXQ6IGUtY29tbWVyY2UgYW5kIEFNWk4uCgpBTVpOIGRvZXMgbm90IGZv
Y3VzIG9uIG1ha2luZyBwcm9maXQuCgpbIVtBbWF6b24ncyBMb25nLVRlcm0gR3Jv
d3RoXSgvaW1nL2FtYXpvbi1wcm9maXRzLnBuZyldKC9pbWcvYW1hem9uLXByb2Zp
dHMucG5nKQoKKFNvdXJjZXM6IFtodHRwczovL3d3dy5zdGF0aXN0YS5jb20vc3Rh
dGlzdGljcy8zNDYxNjcvZmFjZWJvb2stZ2xvYmFsLWRhdS9dKGh0dHBzOi8vd3d3
LnN0YXRpc3RhLmNvbS9zdGF0aXN0aWNzLzM0NjE2Ny9mYWNlYm9vay1nbG9iYWwt
ZGF1LykgYW5kIFtodHRwczovL3d3dy5zdGF0aXN0YS5jb20vc3RhdGlzdGljcy8y
NjQ4MTAvbnVtYmVyLW9mLW1vbnRobHktYWN0aXZlLWZhY2Vib29rLXVzZXJzLXdv
cmxkd2lkZS9dKGh0dHBzOi8vd3d3LnN0YXRpc3RhLmNvbS9zdGF0aXN0aWNzLzI2
NDgxMC9udW1iZXItb2YtbW9udGhseS1hY3RpdmUtZmFjZWJvb2stdXNlcnMtd29y
bGR3aWRlLykpCgpJbnN0ZWFkLCBpdHMgbWlzc2lvbiBpcyB0byBzZWVrIG1hcmtl
dCBsZWFkZXJzaGlwLCBjcnVzaGluZyBjb21wZXRpdG9ycyBpbiB0aGUgVVNBLgoK
WyFbQW1hem9uIGhhcyBvdXRncm93biBjb21wZXRpdG9yc10oL2ltZy9hbWF6b24t
b3V0Z3Jvd24tY29tcGV0aXRvcnMuanBnKV0oL2ltZy9hbWF6b24tb3V0Z3Jvd24t
Y29tcGV0aXRvcnMuanBnKQoKSSBjb3VsZCBlbGFib3JhdGUgb24gaG93IEFNWk4g
aXMgKnRoZSBlLWNvbW1lcmNlIGNvbXBhbnkqLCBidXQgSSB3b3VsZCBiZSBqdXN0
IHJlcGVhdGluZyBbU2NvdHQgR2FsbG93YXkncyBleHBvc3VyZSBvZiB0aGlzIHRv
cGljXShodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUdXQmpVc21PLUx3
KS4gSXQncyB3b3J0aCB3YXRjaGluZyBoaXMgdGFsa3MuCgojIyBXaGF0IHRoZSBX
ZWIgd2FzIGFuZCB3aGF0IGl0IGJlY2FtZQoKVGhlIGV2ZW50cyBhbmQgZGF0YSBh
Ym92ZSBkZXNjcmliZSBob3cgdGhyZWUgaW50ZXJuZXQgY29tcGFuaWVzIGhhdmUg
YWNxdWlyZWQgbWFzc2l2ZSBpbmZsdWVuY2Ugb24gdGhlIFdlYiwgYnV0IHdoeSBk
b2VzIHRoYXQgaW1wbHkgdGhlIGJlZ2lubmluZyBvZiB0aGUgV2ViJ3MgZGVhdGg/
IFRvIGFuc3dlciB0aGF0LCB3ZSBuZWVkIHRvIHJlZmxlY3Qgb24gd2hhdCB0aGUg
V2ViIGlzLgoKVGhlIG9yaWdpbmFsIHZpc2lvbiBmb3IgdGhlIFdlYiBhY2NvcmRp
bmcgdG8gaXRzIGNyZWF0b3IsIFRpbSBCZXJuZXJzLUxlZSwgd2FzIGEgc3BhY2Ug
d2l0aCBtdWx0aWxhdGVyYWwgcHVibGlzaGluZyBhbmQgY29uc3VtcHRpb24gb2Yg
aW5mb3JtYXRpb24uIEl0IHdhcyBhIHBlZXItdG8tcGVlciB2aXNpb24gd2l0aCBu
byBkZXBlbmRlbmN5IG9uIGEgc2luZ2xlIHBhcnR5LiBUaW0gaGltc2VsZiBjbGFp
bXMgW3RoZSBXZWIgaXMgZHlpbmddKGh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNv
bS90ZWNobm9sb2d5LzIwMTcvbWFyLzExL3RpbS1iZXJuZXJzLWxlZS13ZWItaW52
ZW50b3Itc2F2ZS1pbnRlcm5ldCk6IHRoZSBXZWIgaGUgd2FudGVkIGFuZCB0aGUg
V2ViIGhlIGdvdCBhcmUgbm8gbG9uZ2VyIHRoZSBzYW1lLgoKPiAqKkRvZXNuJ3Qg
R09PRyBkZWZlbmQgaW4gdGhlIG9wZW4gV2ViPyoqCj4KPiBHT09HLCBhcyBhIGNv
bXBhbnkgYm9ybiBmcm9tIHRoZSBXZWIsIGhhcyBoZWxwZWQgdGFrZSBpdCBmb3J3
YXJkIGJvdGggdGVjaG5vbG9naWNhbGx5IGFuZCBpbiBhZG9wdGlvbi4gVGhhdCBp
cyB1bmRlbmlhYmxlLiBUaGV5IHN0aWxsIGxlYWQgZWZmb3J0cyB0byBpbXByb3Zl
IHRoZSBvcGVuIFdlYiwgc3VjaCBhcyBbYWR2b2NhY3kgb2YgUHJvZ3Jlc3NpdmUg
V2ViIEFwcHMgKFBXQXMpXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93
ZWIvcHJvZ3Jlc3NpdmUtd2ViLWFwcHMvKSBvdmVyIG5hdGl2ZSBtb2JpbGUgYXBw
cy4KPgo+IElzbid0IEdPT0cgdHJ5aW5nIHRvIGd1YXJhbnRlZSB0aGUgb3BlbiBX
ZWIgc3RheXMgYWxpdmU/IE5vdCBuZWNlc3NhcmlseS4gR09PRydzIGdvYWwgaXMg
dG8gZ2F0aGVyIGFzIG11Y2ggcmljaCBkYXRhIGFzIHBvc3NpYmxlLCBhbmQgYnVp
bGQgQUkuIFRoZWlyIG1pc3Npb24gaXMgdG8gaGF2ZSBhbiBBSSBwcm92aWRlIHRp
bWVseSBhbmQgcGVyc29uYWxpemVkIGluZm9ybWF0aW9uIHRvIHVzLCBub3Qgc3Bl
Y2lmaWNhbGx5IHRvIGhhdmUgd2Vic2l0ZXMgcHJvdmlkZSBpbmZvcm1hdGlvbi4g
QW55IEdPT0cgY29uY2VydGVkIGVmZm9ydHMgYXJlIGFsaWduZWQgdG8gdGhlIEFJ
IG1pc3Npb24uCj4KPiBNb2JpbGUgdXNhZ2UgaXMgb24gdGhlIHJpc2Ug4oCTIGhh
dmluZyBhbHJlYWR5IGNyb3NzZWQgZGVza3RvcCBhcyB0aGUgcHJpbWFyeSBjaGFu
bmVsIGZvciBpbnRlcm5ldCB1c2FnZSDigJMgYW5kIG5hdGl2ZSBtb2JpbGUgYXBw
cyBhcmUgc28gZmFyIHRoZSBiZXN0IHdheSBvZiBwcm92aWRpbmcgZ29vZCB1c2Vy
IGV4cGVyaWVuY2Ugb24gbW9iaWxlLiBHT09HIGNvbGxlY3RzIGxpdHRsZSBvciBu
byBkYXRhIGZyb20gbmF0aXZlIG1vYmlsZSBhcHBzLCB0byBzb21lIGV4dGVudCBv
biBBbmRyb2lkLCBidXQgc3BlY2lhbGx5IG9uIGlPUy4gUFdBcyBoYXBwZW4gdG8g
bGl2ZSBpbiB0aGUgbmV1dHJhbCBhbmQgb3BlbiBXZWIsIGFuZCBhcmUgYmV0dGVy
IHN1aXRlZCBmb3IgZGF0YSBjb2xsZWN0aW9uIHdoaWxlIHByb3ZpZGluZyBncmVh
dCB1c2VyIGV4cGVyaWVuY2Ugb24gbW9iaWxlLgo+Cj4gWyFbRGVza3RvcCB2ZXJz
dXMgTW9iaWxlIGludGVybmV0IHVzYWdlXSgvaW1nL2Rlc2t0b3AtdnMtbW9iaWxl
LTIuanBnKV0oL2ltZy9kZXNrdG9wLXZzLW1vYmlsZS0yLmpwZykKPgo+IEdPT0cg
cHJvbW90ZXMgbG9jay1pbiBhbmQgcHJvcHJpZXRhcnkgdGVjaG5vbG9naWVzIHN1
Y2ggYXMgRmlyZWJhc2UgYW5kIEdvb2dsZS1kZXBlbmRlbnQgQU1QIGluc3RhbGxh
dGlvbnMgYXMgbXVjaCBhcyBpdCBhZHZvY2F0ZXMgb3BlbiBQV0FzLiBHT09HIGRv
ZXMgbm90IGNvbnNpc3RlbnRseSBkZWZlbmQgdGhlIG9wZW4gV2ViLiBUaGV5IFtk
cm9wcGVkIFhNUFAgaW4gR3RhbGtdKGh0dHBzOi8vd3d3LmVmZi5vcmcvZGVlcGxp
bmtzLzIwMTMvMDUvZ29vZ2xlLWFiYW5kb25zLW9wZW4tc3RhbmRhcmRzLWluc3Rh
bnQtbWVzc2FnaW5nKSwgYW5kIEd0YWxrIGl0c2VsZiB3YXMgZGVwcmVjYXRlZCwg
ZmF2b3JpbmcgR29vZ2xlIEhhbmdvdXRzIHdpdGggYSBwcm9wcmlldGFyeSBwcm90
b2NvbC4gQ2hyb21lIFdlYiBTdG9yZSBpcyBhIHdhbGxlZCBnYXJkZW4gbGlrZSBB
cHAgU3RvcmUuIFRoZXkgW3NodXRkb3duIEdvb2dsZSBSZWFkZXJdKGh0dHA6Ly9l
ZGl0aW9uLmNubi5jb20vMjAxMy8wMy8xNC90ZWNoL3dlYi9nb29nbGUtcmVhZGVy
LWRpc2NvbnRpbnVlZC9pbmRleC5odG1sKSBiYXNlZCBvbiBSU1MsIGFuIG9wZW4g
c3RhbmRhcmQuIFtHb29nbGUgQ2xvdWQgVFBVXShodHRwczovL3d3dy5mb3JiZXMu
Y29tL3NpdGVzL21vb3JpbnNpZ2h0cy8yMDE3LzA1LzIyL2dvb2dsZS1jbG91ZC10
cHUtc3RyYXRlZ2ljLWltcGxpY2F0aW9ucy1mb3ItZ29vZ2xlLW52aWRpYS1hbmQt
dGhlLW1hY2hpbmUtbGVhcm5pbmctaW5kdXN0cnkvMy8jNjAwNTNjZjc1MTNkKSBp
cyBwcm9wcmlldGFyeSBoYXJkd2FyZSB0aGF0IG9ubHkgZXhpc3RzIGluIHRoZWly
IGRhdGFjZW50ZXJzLCBzdXBwb3J0aW5nIHRoZWlyIG9wZW4gc291cmNlIGZyYW1l
d29yayBUZW5zb3JGbG93LiBHb29nbGUgSW5ib3ggc3VmZmVycyAicHJvcHJpZXRh
cnkgY3JlZXAiOiBub24tc3RhbmRhcmQsIGNsb3NlZCBhbGdvcml0aG1zIHRoYXQg
cHJvbWlzZSB0byBvcmdhbml6ZSB5b3VyIGxpZmUsIGFuIGVzc2VudGlhbCBjb21w
b25lbnQgb2YgYSBsb2NrLWluIGJhc2VkIGJ1c2luZXNzIG1vZGVsLgo+Cj4gR09P
RyBpcyBhIGh1Z2UgY29tcGFueSB3aGVyZSBlbXBsb3llZXMgaGF2ZSBhdXRvbm9t
eSBhbmQgbXVsdGlwbGUgcHJvamVjdHMgYW5kIGVmZm9ydHMgYXJlIG9jY3Vycmlu
Zy4gQmlnIGVmZm9ydHMsIHRob3VnaCwgYXJlIGNvaGVyZW50LCBjb25jZXJ0ZWQs
IGFuZCB3ZWxsIGFsaWduZWQgd2l0aCBpdHMgbWlzc2lvbjogdG8gYmUgYW4gQUkt
Zmlyc3QgY29tcGFueSwgYW4gQUkgdGhhdCBpcyBjbG9zZWQgYW5kIGxpdmVzIGlu
IHRoZWlyIGNsb3VkLgoKRnJvbSB0aGUgOTBzIHVudGlsIHRoZSAyMDEwcywgdGhl
IFdlYiB3ZSBoYXZlIGV4cGVyaWVuY2VkIGhhcyBiZWVuLCBhbGJlaXQgc29tZXdo
YXQgaW1wZXJmZWN0bHksIGZhaXRoZnVsIHRvIGl0cyBvcmlnaW5hbCBwdXJwb3Nl
LiBUaGUgV2ViJ3MgZGl2ZXJzaXR5IGhhcyBncmFudGVkIHNwYWNlIGZvciBtdWx0
aXBsZSBidXNpbmVzc2VzIHRvIGlubm92YXRlIGFuZCB0aHJpdmUsIGluZGVwZW5k
ZW50IGhvYmJ5aXN0IGNvbW11bml0aWVzIHRvIGdyb3csIGFuZCBwZXJzb25hbCBz
aXRlcyB0byBiZSBob3N0ZWQgb24gd2hhdGV2ZXIgcGh5c2ljYWwgc2VydmVycyBj
YW4gaG9zdCB0aGVtLiBUaGUgaW50ZXJuZXQncyBpbmZyYXN0cnVjdHVyYWwgZGl2
ZXJzaXR5IGlzIGRpcmVjdGx5IHRpZWQgdG8gdGhlIHN1Y2Nlc3Mgb2YgZGl2ZXJz
ZSBXZWIgYnVzaW5lc3NlcyBhbmQgY29tbXVuaXRpZXMuIFRoZSBXZWIncyBvcGVu
bmVzcyBpcyB2aXRhbCBmb3IgaXRzIHNlY3VyaXR5LCBhY2Nlc3NpYmlsaXR5LCBp
bm5vdmF0aW9uIGFuZCBjb21wZXRpdGl2ZW5lc3MuCgpBZnRlciAyMDE0LCB3ZSBz
dGFydGVkIGxvc2luZyB0aGUgYmVuZWZpdHMgb2YgdGhlIGludGVybmV0J3MgaW5m
cmFzdHJ1Y3R1cmFsIGFuZCBlY29ub21pY2FsIGRpdmVyc2l0eS4gSXQgaXMgZGlm
ZmljdWx0IHRvIGNvbXBldGUgd2l0aCBBTVpOJ3MgYW5kIEdPT0cncyBDbG91ZCBT
ZXJ2aWNlcywgd2hpY2ggaG9zdCBhIG1hc3NpdmUgYW1vdW50IG9mIHNpdGVzIGZv
ciBvdGhlciBidXNpbmVzc2VzLiBBbnkgd2Vic2l0ZSBhc3BpcmluZyBmb3Igc2ln
bmlmaWNhbnQgdHJhZmZpYyBkZXBlbmRzIG9uIFNlYXJjaCBhbmQgU29jaWFsIHRy
YWZmaWMuCgojIyBXaGF0IHRoZSBXZWIgd2lsbCBiZWNvbWUgdW5kZXIgR09PRy1G
Qi1BTVpOCgpUaGUgZm9sbG93aW5nIGFuYWx5c2lzIGlzIGFuIGV4dHJhcG9sYXRp
b24gZm9yIHRoZSBmdXR1cmUsIGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9m
IHRoZSBXZWIgYW5kIHN0cmF0ZWdpZXMgbWFkZSBwdWJsaWMgYnkgZXhlY3V0aXZl
cyBhdCBHT09HLUZCLUFNWk4uCgpUaGUgV2FyIGZvciBOZXQgTmV1dHJhbGl0eSBp
biB0aGUgVVNBIHdvbiBhIFtiYXR0bGUgaW4gMjAxNF0oaHR0cHM6Ly93d3cudGhl
dmVyZ2UuY29tLzIwMTQvMi8yNS81NDMxMzgyKSwgYnV0IGluIDIwMTcgd2UgYXJl
IHNlZWluZyBhIFtzZWNvbmQgYmF0dGxlXShodHRwczovL3d3dy50aGV2ZXJnZS5j
b20vMjAxNy83LzEyLzE1NzE1MDMwKSB3aGljaCBpcyBtb3JlIGxpa2VseSB0byBi
ZSBsb3N0LiBJbnRlcm5ldCBTZXJ2aWNlIFByb3ZpZGVycyAoSVNQcykgYXJlIHBy
b2JhYmx5IHNvb24gZ29pbmcgdG8gZGljdGF0ZSB3aGF0IHRyYWZmaWMgY2FuIG9y
IGNhbm5vdCBhcnJpdmUgYXQgcGVvcGxlJ3MgZW5kIGRldmljZXMuIEdPT0ctRkIt
QU1aTiB0cmFmZmljIHdvdWxkIGJlIHRoZSBtb3N0IGNvbW1vbiwgZHVlIHRvIHRo
ZWlyIHBvcHVsYXJpdHkgYW1vbmcgaW50ZXJuZXQgdXNlcnMuIEJlY2F1c2Ugb2Yg
dGhpcyBtYXJrZXQgZGVtYW5kLCBJU1BzIHdpbGwgbGlrZWx5IHByb3ZpZGUgY2hl
YXAgcGxhbnMgd2l0aCBhY2Nlc3MgdG8gR09PRy1GQi1BTVpOLCB3aGlsZSBvZmZl
cmluZyBtb3JlIGV4cGVuc2l2ZSBwbGFucyB3aXRoIGZ1bGwgaW50ZXJuZXQgYWNj
ZXNzLiBbSXQgaXMgYWxyZWFkeSBhIHJlYWxpdHkgaW4gUG9ydHVnYWxdKGh0dHBz
Oi8vd3d3LnJlZGRpdC5jb20vci90ZWNobm9sb2d5L2NvbW1lbnRzLzc5NzcwaS9p
bl9wb3J0dWdhbF93aXRoX25vX25ldF9uZXV0cmFsaXR5X2ludGVybmV0LykuIFRo
aXMgd291bGQgZ3JvdyBldmVuIG1vcmUgdGhlIGRvbWluYW5jZSB0aGUgdGhyZWUg
dGVjaCBnaWFudHMgYWxyZWFkeSBlbmpveS4gVGhlcmUgd291bGQgYmUgbm8gbW9y
ZSBlY29ub21pY2FsIGluY2VudGl2ZSBmb3Igc21hbGxlciBidXNpbmVzc2VzIHRv
IGhhdmUgaW5kZXBlbmRlbnQgd2Vic2l0ZXMsIGFuZCBhIGdyYWR1YWwgbWlncmF0
aW9uIHRvd2FyZHMgRmFjZWJvb2sgUGFnZXMgd291bGQgbWFrZSBtb3JlIHNlbnNl
LiBTbWFsbGVyIGUtY29tbWVyY2Ugc2l0ZXMgd291bGQgYmUgYm91Z2h0IGJ5IEFN
Wk4gb3IgZ28gYmFua3J1cHQuIEJlY2F1c2UgbW9zdCBpbnRlcm5ldCB1c2VycyBj
b3VsZG4ndCBvcGVuIGFsbCB0aGUgc2l0ZXMsIEdPT0cgd291bGQgaGF2ZSBsaXR0
bGUgaW5jZW50aXZlIHRvIGJlIGEgbWVyZSBicmlkZ2UgYmV0d2VlbiBwZW9wbGUg
YW5kIHNpdGVzLgoKR09PRydzIHNoaWZ0IGF3YXkgZnJvbSBTZWFyY2ggaXMgYSBz
aWduIGhvdyB0aGV5IGFyZSBncm93aW5nIHRoZWlyIHN0cmF0ZWd5IGJleW9uZCB0
aGUgV2ViLiBGb3IgbWFueSB5ZWFycywgR29vZ2xlIHVzZWQgdG8gYmUganVzdCBh
IHRvb2wgdGhhdCBwbGF5ZWQgdGhlIGltcG9ydGFudCByb2xlIG9mIGFzc2lzdGlu
ZyB0aGUgV2ViLCBieSBpbmRleGluZyBpdC4gTGF0ZWx5LCBob3dldmVyLCBpdCBp
cyBub3QgYXR0cmFjdGl2ZSBmb3IgR29vZ2xlIHRvIGJlIGEgbWVyZSBzZWFyY2gg
ZW5naW5lIG9mIHRoZSBXZWIuIEZvciB0aGUgcHVycG9zZXMgZXhwcmVzc2VkIGlu
IHRoZWlyIFttaXNzaW9uIHN0YXRlbWVudF0oaHR0cHM6Ly93d3cudGhlZ3VhcmRp
YW4uY29tL3RlY2hub2xvZ3kvMjAxNC9ub3YvMDMvbGFycnktcGFnZS1nb29nbGUt
ZG9udC1iZS1ldmlsLXNlcmdleS1icmluKSwgInRvIG9yZ2FuaXplIHRoZSB3b3Js
ZCdzIGluZm9ybWF0aW9uIGFuZCBtYWtlIGl0IHVuaXZlcnNhbGx5IGFjY2Vzc2li
bGUgYW5kIHVzZWZ1bCIsIHRoZSBzZWFyY2ggZW5naW5lIGFwcHJvYWNoIGhhcyBi
ZWVuIGV4aGF1c3RlZC4gVGhlIG11bHRpLXNlY29uZCBwYXRoIGZyb20gc2VhcmNo
IHF1ZXJ5LCB0byBzZWFyY2ggcmVzdWx0cywgdG8gd2VicGFnZSwgdG8gaW5mb3Jt
YXRpb24sIGlzIHRvbyBsb25nIHRvIHByb3ZpZGUgYW4gaWRlYWwgdXNlciBleHBl
cmllbmNlLiBUaGVpciBnb2FsIGlzIHRvIGN1dCB0aGUgbWlkZGxlbWVuIGluIHRo
YXQgcGF0aC4gVGhleSBoYXZlIHRyaWVkIHRvIGN1dCBvdXQgdGhlIHJlc3VsdHMg
cGFnZSB3aXRoIHRoZWlyICJJJ20gZmVlbGluZyBsdWNreSIgYnV0dG9uLCBidXQg
d2l0aG91dCBpbnRlbGxpZ2VudCBhbmFseXNpcyB0aGV5IGNhbm5vdCByZWxpYWJs
eSB0YWtlIHNob3J0Y3V0cyBpbiB0aGF0IHBhdGguIFdpdGggQUksIHRoZXkgYmVs
aWV2ZSB0aGV5IGNhbiBzaG9ydGVuIHRoZSBwYXRoIHRvIGp1c3Qgb25lIHN0ZXAs
ICJnZXQgaW5mb3JtYXRpb24iLCBldmVuIHdpdGhvdXQgc2VhcmNoaW5nIGZvciBp
dCBpbiB0aGUgZmlyc3QgcGxhY2UuIFRoYXQncyB0aGUgcHVycG9zZSBvZiBTdWdn
ZXN0LgoKQXMgYW4gaW5kZXgsIHBlb3BsZSBoYXZlIGRpZmZlcmVudCBleHBlY3Rh
dGlvbnMgb24gc2VhcmNoIHJlc3VsdCBuZXV0cmFsaXR5LiBTb21lIHdhbnQgR29v
Z2xlIFNlYXJjaCB0byBiZSBlbnRpcmVseSBuZXV0cmFsLCBzb21lIGRlbWFuZCBp
bW1lZGlhdGUgYWN0aW9uIHRvIHJlbW92ZSBzb21lIHJlc3VsdHMuIFRoZSBFdXJv
cGVhbiBVbmlvbiBoYXMgYm90aCBbZGVtYW5kZWQgR09PRyB0byBjb21wbHkgd2l0
aCByZW1vdmFsIHJlcXVlc3RzXShodHRwczovL3d3dy5jbmV0LmNvbS9uZXdzL2dv
b2dsZS1tdXN0LWRlbGV0ZS1zZWFyY2gtcmVzdWx0cy1ydWxlcy1ldXJvcGVhbi1j
b3VydC8pLCBhbmQgW2ZpbmVkIEdPT0cgZm9yIG5vdCBiZWluZyBuZXV0cmFsIGlu
IHNob3BwaW5nIHF1ZXJpZXNdKGh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3
cy9hcnRpY2xlcy8yMDE3LTA2LTI3L2dvb2dsZS1nZXRzLXJlY29yZC0yLTctYmls
bGlvbi1ldS1maW5lLWZvci1za2V3aW5nLXNlYXJjaGVzKS4gSXQgaXMgbm90IGJl
bmVmaWNpYWwgZm9yIEdPT0cgdG8gYXNzdW1lIHRoZSByb2xlIG9mIGFuIGltcGFy
dGlhbCBhcmJpdHJlciBvZiBjb250ZW50LCBzaW5jZSBpdCdzIG5vdCBzdXBwb3J0
aW5nIHRoZWlyIGJ1c2luZXNzIG1vZGVsLiBRdWl0ZSB0aGUgY29udHJhcnksIHRo
ZXkgYXJlIHVuZGVyIHB1YmxpYyBzY3J1dGlueSBmcm9tIG11bHRpcGxlIGdvdmVy
bm1lbnRzLCBwb3RlbnRpYWxseSByaXNraW5nIHRoZWlyIHJlcHV0YXRpb24uCgpU
aGUgU3VnZ2VzdCBzdHJhdGVneSBpcyBiZWluZyBjdXJyZW50bHkgZGXscGxveWVk
IHRocm91Z2ggR29vZ2xlIE5vdywgR29vZ2xlIEFzc2lzdGFudCwgQW5kcm9pZCBu
b3RpZmljYXRpb25zLCBhbmQgR29vZ2xlIEhvbWUuIE5vbmUgb2YgdGhlc2UgbWVu
dGlvbmVkIHRlY2hub2xvZ2llcyBhcmUgcGFydCBvZiBXZWIsIGluIG90aGVyIHdv
cmRzLCBub3QgcGFydCBvZiAiYnJvd3Nlci1sYW5kIiBtYWRlIG9mIHdlYnNpdGVz
LiBUaGUgaW50ZXJuZXQgaXMganVzdCB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQg
bGF5ZXIgZm9yIGRhdGEgZnJvbSB0aGVpciBjbG91ZCB0byBlbmQtdXNlciBkZXZp
Y2VzLCBidXQgdGhlIFdlYiBpdHNlbGYgaXMgYmVpbmcgYnlwYXNzZWQuIFtTY2ht
aWR0J3MgdmlzaW9uIGZvciB0aGUgZnV0dXJlXShodHRwOi8vd3d3LmhvbGx5d29v
ZHJlcG9ydGVyLmNvbS9uZXdzL2dvb2dsZS1jaGFpcm1hbi1lcmljLXNjaG1pZHQt
aW50ZXJuZXQtNzY1OTg5KSBpcyBvbmUgd2hlcmUgaW50ZXJuZXQgc2VydmljZXMg
YXJlIHViaXF1aXRvdXMgYW5kIHBlcnNvbmFsaXplZCwgYXMgb3Bwb3NlZCB0byBh
biBleHBlcmllbmNlIGNvbnRhaW5lZCBpbiB3ZWIgYnJvd3NlcnMgaW4gZGVza3Rv
cCBtYWNoaW5lcy4KClNpbWlsYXJseSwgd2hpbGUgQU1aTidzIGJ1c2luZXNzIHN0
aWxsIHJlbGllcyBvbiB0cmFmZmljIHRvIHRoZWlyIGRlc2t0b3Agd2ViIHBvcnRh
bCAoYWNjb3VudGluZyBmb3IgMzMlIG9mIHNhbGVzKSwgYSBbbGFyZ2UgcG9ydGlv
bl0oaHR0cHM6Ly93d3cuc3RhdGlzdGEuY29tL3N0YXRpc3RpY3MvNjkwMzY2L2Ft
YXpvbi1wdXJjaGFzZS1jaGFubmVscy11c2EvKSAoMjUlKSBvZiB0aGVpciBzYWxl
cyBoYXBwZW4gdGhyb3VnaCBtb2JpbGUgYXBwcywgbm90IHRvIG1lbnRpb24gQW1h
em9uIEVjaG8uIExpa2UgR29vZ2xlIEhvbWUsIEFtYXpvbiBFY2hvIGJ5cGFzc2Vz
IHRoZSBXZWIgYW5kIHVzZXMgdGhlIGludGVybmV0IGp1c3QgZm9yIGNvbW11bmlj
YXRpb24gYmV0d2VlbiBjbG91ZCBhbmQgZW5kIHVzZXIuIEluIHRoZXNlIG5ldyBu
b24td2ViIGNvbnRleHRzLCB0ZWNoIGdpYW50cyBoYXZlIG1vcmUgYXV0aG9yaXR5
IG92ZXIgZGF0YSB0cmFmZmljLiBUaGV5IGNhbiBldmVuIGRpcmVjdGx5IGJsb2Nr
IGVhY2ggb3RoZXIsIGxpa2UgW0dPT0cgcmVjZW50bHkgY3V0IHN1cHBvcnQgZm9y
IFlvdVR1YmUgdHJhZmZpYyBpbiBBbWF6b24gRWNobyBkZXZpY2VzXShodHRwOi8v
d3d3LnJldXRlcnMuY29tL2FydGljbGUvdXMtYW1hem9uLWNvbS1nb29nbGUvYW1h
em9uLXNheXMtZ29vZ2xlLWhhcy1wdWxsZWQteW91dHViZS1mcm9tLWVjaG8tc2hv
dy1kZXZpY2UtaW4tdGVjaC1mYWNlLW9mZi1pZFVTS0NOMUMyMEE4KS4KCiMjIFRo
ZSBBcHBsZWlmaWNhdGlvbiBvZiB0ZWNoIGdpYW50cwoKR09PRywgTVNGVCwgRkIs
IGFuZCBBTVpOIGFyZSBtaW1pY2tpbmcgQUFQTCdzIHN0cmF0ZWd5IG9mIGJ1aWxk
aW5nIGJyYW5kIGxveWFsdHkgYXJvdW5kIGhpZ2gtZW5kIGRldmljZXMuIFRocm91
Z2ggYSBwcm9jZXNzIEkgY2FsbCAiQXBwbGVpZmljYXRpb24iLCB0aGV5IGFyZSAo
MSkgc2V0dGluZyB1cCB3YWxsZWQgZ2FyZGVucywgKDIpIGJlY29taW5nIGhhcmR3
YXJlIGNvbXBhbmllcywgYW5kICgzKSBtYXJrZXRpbmcgdGhlIGRlc2lnbiB3aGls
ZSBkZXNpZ25pbmcgZm9yIHRoZSBtYXJrZXQuIEl0IGlzIGEgdGhyZWF0IHRvIEFB
UEwgaXRzZWxmLCBiZWNhdXNlIHRoZXkgYXJlIGJlaGluZCB0aGUgb3RoZXIgZ2lh
bnRzIHdoZW4gaXQgY29tZXMgdG8gYmlnIGRhdGEgY29sbGVjdGlvbiBhbmQgaXRz
IHVzZXMuIFdoaWxlIEFBUEwncyBlYXJseSBhbmQgYm9sZCBpbnRyb2R1Y3Rpb24g
b2YgYW4gQXBwIFN0b3JlIHNob29rIHRoZSBXZWIgYXMgdGhlIGRvbWluYW50IHNv
ZnR3YXJlIGRpc3RyaWJ1dGlvbiBwbGF0Zm9ybSwgaXQgd2Fzbid0IGVub3VnaCB0
byByZXBsYWNlIGl0LiBUaGUgbmV4dCB3YXZlIG9mIHdhbGxlZCBnYXJkZW5zIG1p
Z2h0IGxvb2sgZGlmZmVyZW50OiBsZXNzIG5vdGljZWFibGUsIGJ1dCBub25ldGhl
bGVzcyBkaXNydXB0aXZlIHRvIHRoZSBXZWIuCgpbIVtHT09HIGRldmljZXNdKC9p
bWcvZ29vZy1kZXZpY2VzLmpwZyldKC9pbWcvZ29vZy1kZXZpY2VzLmpwZykKClRo
ZXJlIGlzIGEgdGVuZGVuY3kgYXQgR09PRy1GQi1BTVpOIHRvIGJ5cGFzcyB0aGUg
V2ViIHdoaWNoIGlzIG1vdGl2YXRlZCBieSB1c2VyIGV4cGVyaWVuY2UgYW5kIGVm
ZmljaWVudCBjb21tdW5pY2F0aW9uLCBub3QgYnkgYW4gYWdlbmRhIHRvIGF2b2lk
IGJyb3dzZXJzLiBJbiB0aGUga25vd2xlZGdlIGludGVybmV0IGFuZCB0aGUgY29t
bWVyY2UgaW50ZXJuZXQsIGJlaW5nIGVmZmljaWVudCB0byBwcm92aWRlIHdoYXQg
dXNlcnMgd2FudCBpcyB0aGUgZ29hbC4gSW4gdGhlIHNvY2lhbCBpbnRlcm5ldCwg
dGhlIGdvYWwgaXMgdG8gcHJvdmlkZSBhbiBlZmZpY2llbnQgY2hhbm5lbCBmb3Ig
Y29tbXVuaWNhdGlvbiBiZXR3ZWVuIHBlb3BsZS4gVGhpcyBleHBsYWlucyBGQidz
IDEwLXllYXIgc3RyYXRlZ3kgd2l0aCBBdWdtZW50ZWQgUmVhbGl0eSAoQVIpIGFu
ZCBWaXJ0dWFsIFJlYWxpdHkgKFZSKSBhcyB0aGUgbmV4dCBtZWRpdW0gZm9yIHNv
Y2lhbCBpbnRlcmFjdGlvbnMgdGhyb3VnaCB0aGUgaW50ZXJuZXQuIFRoaXMgc3Ry
YXRlZ3kgd291bGQgYWxzbyBieXBhc3MgdGhlIFdlYiwgcHJvdmluZyBob3cgbW9y
ZSBuYXR1cmFsIHNvY2lhbCBBUiB3b3VsZCBiZSB0aGFuIHNvY2lhbCByZWFsLXRp
bWUgdGV4dGluZyBpbiBicm93c2Vycy4gQWxyZWFkeSB0b2RheSwgbW9zdCBwZW9w
bGUgb24gdGhlIGludGVybmV0IGNvbW11bmljYXRlIHdpdGggb3RoZXIgcGVvcGxl
IHZpYSBhIG1vYmlsZSBhcHAsIG5vdCB2aWEgYSBicm93c2VyLgoKVGhlIGNvbW1v
biBwYXR0ZXJuIGFtb25nIHRoZXNlIHRocmVlIGludGVybmV0IGdpYW50cyBpcyB0
byBncm93IGJleW9uZCBicm93c2VycywgY3JlYXRpbmcgbmV3IHZpcnR1YWwgY29u
dGV4dHMgd2hlcmUgZGF0YSBpcyBjcmVhdGVkIGFuZCBzaGFyZWQuIFRoZSBXZWIg
bWF5IGRpZSBsaWtlIG1vc3Qgb3RoZXIgdGVjaG5vbG9naWVzIGRvOiBzaW1wbHkg
YnkgYmVjb21pbmcgbGVzcyBhdHRyYWN0aXZlIHRoYW4gbmV3ZXIgdGVjaG5vbG9n
aWVzLiBBbmQgbGlrZSBtb3N0IG9ic29sZXRlIHRlY2hub2xvZ2llcywgdGhleSBk
b24ndCBzdWRkZW5seSBkaXNhcHBlYXIsIG5laXRoZXIgZG8gdGhleSBkaXNhcHBl
YXIgY29tcGxldGVseS4gWW91IGNhbiBzdGlsbCBidXkgYSBXYWxrbWFuIGFuZCBs
aXN0ZW4gdG8gYSB0YXBlIHdpdGggaXQsIGJ1dCB0aGUgdGVjaG5vbG9neSBoYXMg
bmV2ZXJ0aGVsZXNzIGxvc3QgaXRzIGNvbGxlY3RpdmUgcmVsZXZhbmNlLiBUaGUg
V2ViJ3MgZGVhdGggd2lsbCBjb21lIGFzIGEgZ3JhZHVhbCBkZWNheSBvZiBpdHMg
bmVjZXNzaXR5LCBub3QgYXMgYSBkcmFtYXRpYyBsb3NzLgoKIyMgVGhlIFRyaW5l
dAoKVGhlIGludGVybmV0IHdpbGwgc3Vydml2ZSBsb25nZXIgdGhhbiB0aGUgV2Vi
IHdpbGwuIEdPT0ctRkItQU1aTiB3aWxsIHN0aWxsIGRlcGVuZCBvbiBzdWJtYXJp
bmUgaW50ZXJuZXQgY2FibGVzICh0aGUgIltCYWNrYm9uZV0oaHR0cHM6Ly9lbi53
aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuZXRfYmFja2JvbmUpIiksIGJlY2F1c2Ug
aXQgaXMgYSB0ZWNobmljYWwgc3VjY2Vzcy4gVGhhdCBzYWlkLCBtYW55IGFzcGVj
dHMgb2YgdGhlIGludGVybmV0IHdpbGwgbG9zZSB0aGVpciByZWxldmFuY2UsIGFu
ZCB0aGUgdW5kZXJseWluZyBpbmZyYXN0cnVjdHVyZSBjb3VsZCBiZSBvcHRpbWl6
ZWQgb25seSBmb3IgR09PRyB0cmFmZmljLCBGQiB0cmFmZmljLCBhbmQgQU1aTiB0
cmFmZmljLiBJdCB3b3VsZG4ndCBjb25jZXB0dWFsbHkgYmUgYW55bW9yZSBhICJu
ZXR3b3JrIG9mIG5ldHdvcmtzIiwgYnV0IGp1c3QgYSAibmV0d29yayBvZiB0aHJl
ZSBuZXR3b3JrcyIsIHRoZSAqVHJpbmV0KiwgaWYgeW91IHdpbGwuIFRoZSBjb25j
ZXB0IG9mIHdvcmtwbGFjZSBuZXR3b3JrIHdoaWNoIGdhdmUgYmlydGggdG8gdGhl
IGludGVybmV0IGluZnJhc3RydWN0dXJlIHdvdWxkIG1pZ3JhdGUgdG8gYSBtb3Jl
IGFic3RyYWN0IOtsZXZlbDogRmFjZWJvb2sgR3JvdXBzLCBHb29nbGUgSGFuZ291
dHMsIEcgU3VpdGUsIGFuZCBvdGhlciBjb21wZXRpbmcgc2VydmljZXMgd2hpY2gg
Y2FuIGJlIGFjcXVpcmVkIGJ5IGEgdGVjaCBnaWFudC4gV29ya3BsYWNlIG5ldHdv
cmtzIGFyZSBhbHJlYWR5IHRvZGF5IGVtdWxhdGVkIGluIHNvZnR3YXJlIGFzIGEg
c2VydmljZSwgbm90IGFzIHRyYWRpdGlvbmFsIExvY2FsIEFyZWEgTmV0d29ya3Mu
IFRvIGltcHJvdmUgdXNlciBleHBlcmllbmNlLCB0aGUgVHJpbmV0IHdvdWxkIGJl
IGEgdGVjaG5pY2FsIGV2b2x1dGlvbiBvZiB0aGUgaW50ZXJuZXQuIFRoZXNlIGVm
Zm9ydHMgYXJlIGFscmVhZHkgaGFwcGVuaW5nIHRvZGF5LCBbYXQgR09PR10oaHR0
cHM6Ly93d3cubmV4dHBsYXRmb3JtLmNvbS8yMDE3LzA3LzE3L2dvb2dsZS13YW50
cy1yZXdpcmUtaW50ZXJuZXQvKS4gSW4gdGhlIGxvbmctdGVybSwgc3VwcG9ydGlu
ZyByb3V0aW5nIGZvciB0aGUgb2xkIGludGVybmV0IGFuZCB0aGUgb2xkIFdlYiB3
b3VsZCBiZSBhbiBvdmVyaGVhZCwgc28gaXQgY291bGQgYmUgYmVuZWZpY2lhbCB0
byBjdXQgc3VwcG9ydCBmb3IgdGhlIGRpdmVyc2UgaW50ZXJuZXQgb24gdGhlIHBy
b3RvY29sIGFuZCBoYXJkd2FyZSBsZXZlbC4gQWNjZXNzIHRvIHRoZSBvbGQgaW50
ZXJuZXQgY291bGQgYmUgZW11bGF0ZWQgb24gR09PRydzIGNsb3VkIGFjY2Vzc2Vk
IHRocm91Z2ggdGhlIFRyaW5ldCwgbXVjaCBsaWtlIGhvdyBbV2luZG93cyA5NSBj
YW4gYmUgdG9kYXkgZW11bGF0ZWQgaW4geW91ciBicm93c2VyXShodHRwczovL3dp
bjk1LmFqZi5tZS8pLiBJU1BzIHdvdWxkIHJlY29nbml6ZSB0aGUgb2Jzb2xlbmNl
IG9mIHRoZSBpbnRlcm5ldCBhbmQgc3VwcG9ydCB0aGUgVHJpbmV0IG9ubHksIGRy
aXZlbiBieSBtYXJrZXQgZGVtYW5kIGZvciBvcHRpbWFsIHVzZXIgZXhwZXJpZW5j
ZSBmcm9tIEdPT0ctRkItQU1aTi4KClBlcmhhcHMgYSBmdXR1cmUgd2l0aCBncmVh
dCB1c2VyIGV4cGVyaWVuY2UgaW4gQVIsIFZSLCBoYW5kcy1mcmVlIGNvbW1lcmNl
IGFuZCBrbm93bGVkZ2Ugc2hhcmluZyBjb3VsZCBldm9rZSBhbiBvcHRpbWlzdGlj
IHBlcnNwZWN0aXZlIGZvciB3aGF0IHRoZXNlIHRlY2ggZ2lhbnRzIGFyZSBidWls
ZGluZy4gQnV0IDI1IHllYXJzIG9mIHRoZSBXZWIgaGFzIGdvdHRlbiB1cyB1c2Vk
IHRvIGZvdW5kYXRpb25hbCBmcmVlZG9tcyB0aGF0IHdlIHRha2UgZm9yIGdyYW50
ZWQuIFdlIGZvcmdldCBob3cgdXNlZnVsIGl0IGhhcyBiZWVuIHRvIHJlbWFpbiBh
bm9ueW1vdXMgYW5kIGNvbnRyb2wgd2hhdCB3ZSBzaGFyZSwgb3IgaG93IGVhc3kg
aXQgd2FzIHRvIHN0YXJ0IGFuIGludGVybmV0IHN0YXJ0dXAgd2l0aCBpdHMgb3du
IGluZGVwZW5kZW50IHNlcnZlcnMgb3BlcmF0aW5nIHdpdGggdGhlIHNhbWUgcmln
aHRzIEdPT0cgc2VydmVycyBoYXZlLiBPbiB0aGUgVHJpbmV0LCBpZiB5b3UgYXJl
IHBlcm1hbmVudGx5IGJhbm5lZCBmcm9tIEdPT0cgb3IgRkIsIHlvdSB3b3VsZCBo
YXZlIG5vIGFsdGVybmF0aXZlLiBZb3UgY291bGQgZXZlbiBiZSByZXN0cmljdGVk
IGZyb20gY3JlYXRpbmcgYSBuZXcgYWNjb3VudC4gQXMgcHJpdmF0ZSBidXNpbmVz
c2VzLCBHT09HLCBGQiwgYW5kIEFNWk4gZG9uJ3QgbmVlZCB0byBndWFyYW50ZWUg
eW91IGFjY2VzcyB0byB0aGVpciBuZXR3b3Jrcy4gWW91IGRvIG5vdCBoYXZlIGEg
bGVnYWwgcmlnaHQgdG8gYW4gYWNjb3VudCBpbiB0aGVpciBzZXJ2ZXJzLCBhbmQg
YXMgc29jaWV0aWVzIHdlIGFyZW4ndCBkZW1hbmRpbmcgZm9yIHRoZXNlIHJpZ2h0
cyBhcyB2ZWhlbWVudGx5IGFzIHdlIGNvdWxkLCB0byBjb3VudGVyIHRoZSBzdHJh
dGVnaWVzIHRoYXQgdGVjaCBnaWFudHMgYXJlIHB1dHRpbmcgZm9yd2FyZC4KClRo
ZSBXZWIgYW5kIHRoZSBpbnRlcm5ldCBoYXZlIHJlcHJlc2VudGVkIGZyZWVkb206
IGVmZmljaWVudCBhbmQgdW5zdXBlcnZpc2VkIGV4Y2hhbmdlIG9mIGluZm9ybWF0
aW9uIGJldHdlZW4gcGVvcGxlIG9mIGFsbCBuYXRpb25zLiBJbiB0aGUgVOdyaW5l
dCwgd2Ugd2lsbCBoYXZlIGV2ZW4gbW9yZSB2aXZpZCBleGNoYW5nZSBvZiBpbmZv
cm1hdGlvbiBiZXR3ZWVuIHBlb3BsZSwgYnV0IHdlIHdpbGwgc2FjcmlmaWNlIGZy
ZWVkb20uIE1hbnkgb2YgdXMgd2lsbCB3YWtlIOV1cCB0byB0aGUgdHJhZ2VkeSBv
ZiB0aGlzIHRyYWRlb+RmZiBvbmx5IG9uY2UgaXQg42lzIHJlYWxp4nR5LgoAwsBc
BAABCgAQBQJZ9zmTCRCe3iPqfopIkAAAx+MIAI6JzYbVtrfPccrVert+9HkUxr59
49TZw7bzGlgq2aktsgELcwE6aWxpyI8ly0UEFVSmeLs+rFDP61hxZtcRKGD6DW23
jdM8yTsuemuPoRCkvYntgAQU3zxuL9TGsFs2g24F9wG4gq9UFQjY31uxsxqL0pfS
p0l0Oli+9/iAQ++I/p+7JO2kA7wzL4sp/y9JT82F9yJNWi7cnPQ2ufBH3MFHJLkc
y9q2tGvEebfYrbGTjRFSf9zI7smj/zvuJM+VX3yB1w3zuU02OfPRPOcZLG4fB1YM
pO3yf91Ph5VpqSAgq+qHhYQE+zw1YHRSgrYkyNKFBIPZgOBiT4No0ANkY4Q=
=26L5
-----END PGP MESSAGE-----
